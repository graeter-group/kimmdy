# recipe { #kimmdy.recipe }

`recipe`

Reaction recipes.

## Classes

| Name | Description |
| --- | --- |
| [Bind](#kimmdy.recipe.Bind) | Change topology to form a bond |
| [BondOperation](#kimmdy.recipe.BondOperation) | Handle a bond operation on the recipe step. |
| [Break](#kimmdy.recipe.Break) | Change topology to break a bond |
| [Place](#kimmdy.recipe.Place) | Change topology and/or coordinates to place an atom. |
| [Recipe](#kimmdy.recipe.Recipe) | A reaction path defined by one series of RecipeSteps. |
| [RecipeCollection](#kimmdy.recipe.RecipeCollection) | A RecipeCollection encompasses a number of reaction paths. |
| [RecipeStep](#kimmdy.recipe.RecipeStep) | Base class for all RecipeSteps. |
| [Relax](#kimmdy.recipe.Relax) | Start a relaxation MD. |

### Bind { #kimmdy.recipe.Bind }

`recipe.Bind()`

Change topology to form a bond

#### Parameters

| Name        | Type         | Description                                               | Default    |
|-------------|--------------|-----------------------------------------------------------|------------|
| `atom_ix_1` | [int](`int`) | The index of the first atom. zero-based, by default None  | _required_ |
| `atom_ix_2` | [int](`int`) | The index of the second atom. zero-based, by default None | _required_ |
| `atom_id_1` | [str](`str`) | The ID of the first atom. one-based, by default None      | _required_ |
| `atom_id_2` | [str](`str`) | The ID of the second atom. one-based, by default None     | _required_ |

### BondOperation { #kimmdy.recipe.BondOperation }

`recipe.BondOperation(atom_ix_1, atom_ix_2, atom_id_1, atom_id_2, _atom_ix_1=field(init=False, repr=False, default=None), _atom_ix_2=field(init=False, repr=False, default=None))`

Handle a bond operation on the recipe step.

This class takes in either zero-based indices or one-base IDs for two atoms

#### Parameters

| Name        | Type         | Description                                               | Default    |
|-------------|--------------|-----------------------------------------------------------|------------|
| `atom_ix_1` | [int](`int`) | The index of the first atom. zero-based, by default None  | _required_ |
| `atom_ix_2` | [int](`int`) | The index of the second atom. zero-based, by default None | _required_ |
| `atom_id_1` | [str](`str`) | The ID of the first atom. one-based, by default None      | _required_ |
| `atom_id_2` | [str](`str`) | The ID of the second atom. one-based, by default None     | _required_ |

#### Raises

| Type                       | Description                                                     |
|----------------------------|-----------------------------------------------------------------|
| [ValueError](`ValueError`) | If neither an index nor an ID is provided for any of the atoms. |

#### Notes

Internally, this class stores the atom indices and converts IDs to indices as needed.

### Break { #kimmdy.recipe.Break }

`recipe.Break()`

Change topology to break a bond

#### Parameters

| Name        | Type         | Description                                               | Default    |
|-------------|--------------|-----------------------------------------------------------|------------|
| `atom_ix_1` | [int](`int`) | The index of the first atom. zero-based, by default None  | _required_ |
| `atom_ix_2` | [int](`int`) | The index of the second atom. zero-based, by default None | _required_ |
| `atom_id_1` | [str](`str`) | The ID of the first atom. one-based, by default None      | _required_ |
| `atom_id_2` | [str](`str`) | The ID of the second atom. one-based, by default None     | _required_ |

### Place { #kimmdy.recipe.Place }

`recipe.Place(new_coords, ix_to_place, id_to_place, _ix_to_place=field(init=False, repr=False, default=None))`

Change topology and/or coordinates to place an atom.

#### Parameters

| Name          | Type                                                                     | Description                                                                               | Default    |
|---------------|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|------------|
| `new_coords`  | [tuple](`tuple`)\[[float](`float`), [float](`float`), [float](`float`)\] | New xyz coordinates for atom to place to. Valid for the end point of the recipe timespan. | _required_ |
| `ix_to_place` | [int](`int`)                                                             | Index of atom to place. 0-based.                                                          | _required_ |
| `id_to_place` | [str](`str`)                                                             | Index of atom to place. 1-based                                                           | _required_ |

### Recipe { #kimmdy.recipe.Recipe }

`recipe.Recipe(recipe_steps, rates, timespans)`

A reaction path defined by one series of RecipeSteps.
Defines everything necessart to build the
product state from the educt state.

#### Parameters

| Name           | Type                                                                   | Description                                                                                                                                                        | Default    |
|----------------|------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| `recipe_steps` | [list](`list`)\[[RecipeStep](`kimmdy.recipe.RecipeStep`)\]             | Single sequence of RecipeSteps to build product                                                                                                                    | _required_ |
| `rates`        | [list](`list`)\[[float](`float`)\]                                     | Reaction rates corresponding 1:1 to timespans.                                                                                                                     | _required_ |
| `timespans`    | [list](`list`)\[[list](`list`)\[[float](`float`), [float](`float`)\]\] | List of half-open timespans (t1, t2] in ps, at which this reaction path applies. Must have same number of timespans as rates. t1 can equal t2 for the first frame. | _required_ |

#### Methods

| Name | Description |
| --- | --- |
| [calc_averages](#kimmdy.recipe.Recipe.calc_averages) | Calulate average rates over some window size |
| [check_consistency](#kimmdy.recipe.Recipe.check_consistency) | Run consistency checks for correct size of variables |
| [combine_with](#kimmdy.recipe.Recipe.combine_with) | Combines this Recipe with another with the same RecipeSteps. |

##### calc_averages { #kimmdy.recipe.Recipe.calc_averages }

`recipe.Recipe.calc_averages(self, window_size)`

Calulate average rates over some window size

###### Parameters

| Name          | Type         | Description                                                                   | Default    |
|---------------|--------------|-------------------------------------------------------------------------------|------------|
| `window_size` | [int](`int`) | Size of the window to average over, -1 to average over whole available range. | _required_ |

##### check_consistency { #kimmdy.recipe.Recipe.check_consistency }

`recipe.Recipe.check_consistency(self)`

Run consistency checks for correct size of variables

##### combine_with { #kimmdy.recipe.Recipe.combine_with }

`recipe.Recipe.combine_with(self, other)`

Combines this Recipe with another with the same RecipeSteps.

###### Parameters

| Name    | Type                             | Description   | Default    |
|---------|----------------------------------|---------------|------------|
| `other` | [Recipe](`kimmdy.recipe.Recipe`) |               | _required_ |

### RecipeCollection { #kimmdy.recipe.RecipeCollection }

`recipe.RecipeCollection(recipes)`

A RecipeCollection encompasses a number of reaction paths.
They can originate from multiple reaction plugins, but do not need to.

#### Methods

| Name | Description |
| --- | --- |
| [aggregate_reactions](#kimmdy.recipe.RecipeCollection.aggregate_reactions) | Combines reactions having the same sequence of RecipeSteps. |
| [calc_cumprob](#kimmdy.recipe.RecipeCollection.calc_cumprob) | Calculate cumulative probability of all contained recipe steps. |
| [from_csv](#kimmdy.recipe.RecipeCollection.from_csv) | Create a RecipeCollection object from a CSV file |
| [plot](#kimmdy.recipe.RecipeCollection.plot) | Plot reaction rates over time |
| [to_csv](#kimmdy.recipe.RecipeCollection.to_csv) | Write a ReactionResult as defined in the reaction module to a csv file |

##### aggregate_reactions { #kimmdy.recipe.RecipeCollection.aggregate_reactions }

`recipe.RecipeCollection.aggregate_reactions(self)`

Combines reactions having the same sequence of RecipeSteps.

##### calc_cumprob { #kimmdy.recipe.RecipeCollection.calc_cumprob }

`recipe.RecipeCollection.calc_cumprob(self)`

Calculate cumulative probability of all contained recipe steps.
Sums up to 1 over all recipes. Assumes constant rate for given timespan
and rate zero otherwise.

##### from_csv { #kimmdy.recipe.RecipeCollection.from_csv }

`recipe.RecipeCollection.from_csv(cls, path)`

Create a RecipeCollection object from a CSV file
Returns the recipe collection and a single recipe that was picked, otherwise None

##### plot { #kimmdy.recipe.RecipeCollection.plot }

`recipe.RecipeCollection.plot(self, outfile, highlight_r=None, highlight_t=None)`

Plot reaction rates over time

###### Parameters

| Name          | Type                             | Description                                          | Default    |
|---------------|----------------------------------|------------------------------------------------------|------------|
| `outfile`     | [Path](`pathlib.Path`)           | Where to save the plot, must have compatible suffix. | _required_ |
| `highlight_r` | [Recipe](`kimmdy.recipe.Recipe`) | Recipe to highlight, by default None                 | `None`     |
| `highlight_t` | [float](`float`)                 | Time at which the reactions starts                   | `None`     |

##### to_csv { #kimmdy.recipe.RecipeCollection.to_csv }

`recipe.RecipeCollection.to_csv(self, path, picked_recipe=None)`

Write a ReactionResult as defined in the reaction module to a csv file

### RecipeStep { #kimmdy.recipe.RecipeStep }

`recipe.RecipeStep()`

Base class for all RecipeSteps.
Indices can be accessed as 0-based or 1-based.
ix: 0-based, int
id: 1-based, str

### Relax { #kimmdy.recipe.Relax }

`recipe.Relax()`

Start a relaxation MD.

The molecular system coordinates are far out of equilibrium after most topology changes.
A relaxtion MD simulation using for example the slow growth method helps to reach the new equilibrium.