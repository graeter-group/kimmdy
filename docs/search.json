[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KIMMDY",
    "section": "",
    "text": "KIMMDY\nWelcome to KIMMDY!\nHead over to the Getting Started section to jump right in.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "_reference/hat_naive.reaction.NaiveHAT.html",
    "href": "_reference/hat_naive.reaction.NaiveHAT.html",
    "title": "hat_naive.reaction.NaiveHAT",
    "section": "",
    "text": "reaction.NaiveHAT()\nNaive HAT reaction, selects hydrogens at random\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_recipe_collection\n\n\n\n\n\n\nreaction.NaiveHAT.get_recipe_collection(self, files)"
  },
  {
    "objectID": "_reference/hat_naive.reaction.NaiveHAT.html#methods",
    "href": "_reference/hat_naive.reaction.NaiveHAT.html#methods",
    "title": "hat_naive.reaction.NaiveHAT",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_recipe_collection\n\n\n\n\n\n\nreaction.NaiveHAT.get_recipe_collection(self, files)"
  },
  {
    "objectID": "_reference/parsing.html",
    "href": "_reference/parsing.html",
    "title": "parsing",
    "section": "",
    "text": "parsing\nAll read_&lt;…&gt; and write_&lt;…&gt; functions.\n\n\n\n\n\nName\nDescription\n\n\n\n\nGMX_BUILTIN_FF_DIR\nPath to gromacs data directory with the built-in forcefields.\n\n\nTopologyDict\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_subsections\n\n\n\nis_not_comment\n\n\n\nread_distances_dat\nRead a distances.dat plumed output file.\n\n\nread_edissoc\nreads a edissoc file and turns it into a dict.\n\n\nread_plumed\nRead a plumed.dat configuration file.\n\n\nread_rtp\n\n\n\nread_top\nRead a topology file into a raw TopologyDict represenation.\n\n\nread_xml_ff\n\n\n\nresolve_includes\nResolve #include statements in a (top/itp) file.\n\n\nwrite_plumed\nWrite a plumed.dat configuration file.\n\n\nwrite_top\nWrite a TopologyDict to a topology file.\n\n\n\n\n\nparsing.create_subsections(ls)\n\n\n\nparsing.is_not_comment(c)\n\n\n\nparsing.read_distances_dat(distances_dat)\nRead a distances.dat plumed output file.\n\n\n\nparsing.read_edissoc(path)\nreads a edissoc file and turns it into a dict. the tuple of bond atoms make up the key, the dissociation energy E_dissoc [kJ mol-1] is the value\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the file. E.g. Path(“edissoc.dat”)\nrequired\n\n\n\n\n\n\n\nparsing.read_plumed(path)\nRead a plumed.dat configuration file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the file. E.g. “plumed.dat”\nrequired\n\n\n\n\n\n\n\nparsing.read_rtp(path)\n\n\n\nparsing.read_top(path)\nRead a topology file into a raw TopologyDict represenation.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the topology file.\nrequired\n\n\n\n\n\n\n\n#include statements will be resolved\ncomments will be removed\nall lines are stripped of leading and trailing whitespace\n#undef is not supported\na section within ifdef may be a subsection of a section that was started outside of the ifdef\n#if..#endif statements only surround a full section or subsection, not individual lines within a section and a section may either be contained within if … else or it may not be, but it can not be duplicated with one part inside and one outside.\nif .. else can't be nested\n#include s that don't resolve to a valid file path are silently dropped\nsections that can have subsections can also exist multiple, separate times e.g. moleculetype will appear multiple times and they should not be merged\n\n\n\n\n\nparsing.read_xml_ff(path)\n\n\n\nparsing.resolve_includes(path)\n\n\npath : Filepath to read.\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[str]\nList of lines.\n\n\nOptional[Path]\nPath to the ff directory if one of the includes used a file from it.\n\n\n\n\n\n\n\nparsing.write_plumed(d, path)\nWrite a plumed.dat configuration file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the file. E.g. “plumed.dat”\nrequired\n\n\n\n\n\n\n\nparsing.write_top(top, outfile)\nWrite a TopologyDict to a topology file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntop\nTopologyDict\nRaw dictionary represenation of the topology.\nrequired\n\n\noutfile\nPath\nPath to the topology file to write to.\nrequired"
  },
  {
    "objectID": "_reference/parsing.html#attributes",
    "href": "_reference/parsing.html#attributes",
    "title": "parsing",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nGMX_BUILTIN_FF_DIR\nPath to gromacs data directory with the built-in forcefields.\n\n\nTopologyDict"
  },
  {
    "objectID": "_reference/parsing.html#functions",
    "href": "_reference/parsing.html#functions",
    "title": "parsing",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncreate_subsections\n\n\n\nis_not_comment\n\n\n\nread_distances_dat\nRead a distances.dat plumed output file.\n\n\nread_edissoc\nreads a edissoc file and turns it into a dict.\n\n\nread_plumed\nRead a plumed.dat configuration file.\n\n\nread_rtp\n\n\n\nread_top\nRead a topology file into a raw TopologyDict represenation.\n\n\nread_xml_ff\n\n\n\nresolve_includes\nResolve #include statements in a (top/itp) file.\n\n\nwrite_plumed\nWrite a plumed.dat configuration file.\n\n\nwrite_top\nWrite a TopologyDict to a topology file.\n\n\n\n\n\nparsing.create_subsections(ls)\n\n\n\nparsing.is_not_comment(c)\n\n\n\nparsing.read_distances_dat(distances_dat)\nRead a distances.dat plumed output file.\n\n\n\nparsing.read_edissoc(path)\nreads a edissoc file and turns it into a dict. the tuple of bond atoms make up the key, the dissociation energy E_dissoc [kJ mol-1] is the value\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the file. E.g. Path(“edissoc.dat”)\nrequired\n\n\n\n\n\n\n\nparsing.read_plumed(path)\nRead a plumed.dat configuration file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the file. E.g. “plumed.dat”\nrequired\n\n\n\n\n\n\n\nparsing.read_rtp(path)\n\n\n\nparsing.read_top(path)\nRead a topology file into a raw TopologyDict represenation.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the topology file.\nrequired\n\n\n\n\n\n\n\n#include statements will be resolved\ncomments will be removed\nall lines are stripped of leading and trailing whitespace\n#undef is not supported\na section within ifdef may be a subsection of a section that was started outside of the ifdef\n#if..#endif statements only surround a full section or subsection, not individual lines within a section and a section may either be contained within if … else or it may not be, but it can not be duplicated with one part inside and one outside.\nif .. else can't be nested\n#include s that don't resolve to a valid file path are silently dropped\nsections that can have subsections can also exist multiple, separate times e.g. moleculetype will appear multiple times and they should not be merged\n\n\n\n\n\nparsing.read_xml_ff(path)\n\n\n\nparsing.resolve_includes(path)\n\n\npath : Filepath to read.\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[str]\nList of lines.\n\n\nOptional[Path]\nPath to the ff directory if one of the includes used a file from it.\n\n\n\n\n\n\n\nparsing.write_plumed(d, path)\nWrite a plumed.dat configuration file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nPath\nPath to the file. E.g. “plumed.dat”\nrequired\n\n\n\n\n\n\n\nparsing.write_top(top, outfile)\nWrite a TopologyDict to a topology file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntop\nTopologyDict\nRaw dictionary represenation of the topology.\nrequired\n\n\noutfile\nPath\nPath to the topology file to write to.\nrequired"
  },
  {
    "objectID": "_reference/changemanager.html",
    "href": "_reference/changemanager.html",
    "title": "changemanager",
    "section": "",
    "text": "changemanager\nThe changemanager module holds functions that modify the system to accomodate recipes. This includes the topolgy and coordinates as well miscelaneaous files used by e.g. the gromacs extension PLUMED as input.\nTODO: some functions in here take TaskFiles, some take their inputs directly. Need to unify.\n\n\n\n\n\nName\nDescription\n\n\n\n\nbreak_bond_plumed\n\n\n\nmodify_coords\nModify the coordinates of the system according to the recipe steps.\n\n\nmodify_plumed\nModify plumed input files.\n\n\nmodify_top\nModify the topology of the system according to the recipe steps.\n\n\n\n\n\nchangemanager.break_bond_plumed(plumeddat, breakpair, plumeddist)\n\n\n\nchangemanager.modify_coords(recipe_steps, files, topA, topB)\nModify the coordinates of the system according to the recipe steps.\nNew coordinates are generated by merging topA and topB and interpolating between them in a MD simulation.\nTODO: the previous sentence is a lie right now, the MD step happens in a different function as its own task, so this function does not actually modify any coordinates, contrary to its name. We should either change the name or make it do what it says it does.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_steps\nlist[RecipeStep]\nA list of RecipeStep where each steps contains a new_coords parameter.\nrequired\n\n\nfiles\nTaskFiles\nInput and output files for this Task. files.input: - trr - tpr files.outputdir files.output: - trr - gro\nrequired\n\n\ntopA\nTopology\nPrevious Topology\nrequired\n\n\ntopB\nTopology\nParameter-adjusted Topology\nrequired\n\n\n\n\n\n\n\nchangemanager.modify_plumed(recipe_steps, oldplumeddat, newplumeddat, plumeddist)\nModify plumed input files.\nTODO: finish this function.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_steps\nlist[RecipeStep]\nA list of RecipeSteps. parameter.\nrequired\n\n\n\n\n\n\n\nchangemanager.modify_top(recipe_steps, files, ffpatch, topology)\nModify the topology of the system according to the recipe steps.\nModifies the topology in place and also writes the new topology to a file to be used by external programs (gromacs).\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_steps\nlist[RecipeStep]\nA list of RecipeSteps. parameter.\nrequired\n\n\nfiles\nTaskFiles\nInput and output files for this Task. files.input: - top files.output: - top\nrequired\n\n\nffpatch\nOptional[Path]\nTODO: deprecate\nrequired\n\n\ntopology\nOptional[Topology]\nTODO: make this required instead of optional\nrequired"
  },
  {
    "objectID": "_reference/changemanager.html#functions",
    "href": "_reference/changemanager.html#functions",
    "title": "changemanager",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nbreak_bond_plumed\n\n\n\nmodify_coords\nModify the coordinates of the system according to the recipe steps.\n\n\nmodify_plumed\nModify plumed input files.\n\n\nmodify_top\nModify the topology of the system according to the recipe steps.\n\n\n\n\n\nchangemanager.break_bond_plumed(plumeddat, breakpair, plumeddist)\n\n\n\nchangemanager.modify_coords(recipe_steps, files, topA, topB)\nModify the coordinates of the system according to the recipe steps.\nNew coordinates are generated by merging topA and topB and interpolating between them in a MD simulation.\nTODO: the previous sentence is a lie right now, the MD step happens in a different function as its own task, so this function does not actually modify any coordinates, contrary to its name. We should either change the name or make it do what it says it does.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_steps\nlist[RecipeStep]\nA list of RecipeStep where each steps contains a new_coords parameter.\nrequired\n\n\nfiles\nTaskFiles\nInput and output files for this Task. files.input: - trr - tpr files.outputdir files.output: - trr - gro\nrequired\n\n\ntopA\nTopology\nPrevious Topology\nrequired\n\n\ntopB\nTopology\nParameter-adjusted Topology\nrequired\n\n\n\n\n\n\n\nchangemanager.modify_plumed(recipe_steps, oldplumeddat, newplumeddat, plumeddist)\nModify plumed input files.\nTODO: finish this function.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_steps\nlist[RecipeStep]\nA list of RecipeSteps. parameter.\nrequired\n\n\n\n\n\n\n\nchangemanager.modify_top(recipe_steps, files, ffpatch, topology)\nModify the topology of the system according to the recipe steps.\nModifies the topology in place and also writes the new topology to a file to be used by external programs (gromacs).\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_steps\nlist[RecipeStep]\nA list of RecipeSteps. parameter.\nrequired\n\n\nfiles\nTaskFiles\nInput and output files for this Task. files.input: - top files.output: - top\nrequired\n\n\nffpatch\nOptional[Path]\nTODO: deprecate\nrequired\n\n\ntopology\nOptional[Topology]\nTODO: make this required instead of optional\nrequired"
  },
  {
    "objectID": "_reference/coordinates.html",
    "href": "_reference/coordinates.html",
    "title": "coordinates",
    "section": "",
    "text": "coordinates\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_explicit_MultipleDihedrals\nTakes a valid dihedral key and returns explicit\n\n\nget_explicit_or_type\nTakes an Interaction and associated key, InteractionTypes, Topology\n\n\nis_parameterized\nParameterized topology entries have c0 and c1 attributes != None\n\n\nmerge_dihedrals\nMerge one to two Dihedrals or -Types into a Dihedral in free-energy syntax\n\n\nmerge_top_parameter_growth\nTakes two Topologies and joins them for a smooth free-energy like parameter transition simulation\n\n\n\n\n\ncoordinates.get_explicit_MultipleDihedrals(dihedral_key, top, dihedrals_in, periodicity_max=6)\nTakes a valid dihedral key and returns explicit dihedral parameters for a given topology\n\n\n\ncoordinates.get_explicit_or_type(key, interaction, interaction_types, top, periodicity='')\nTakes an Interaction and associated key, InteractionTypes, Topology and Periodicity (for dihedrals) and returns an object with the parameters of this Interaction\n\n\n\ncoordinates.is_parameterized(entry)\nParameterized topology entries have c0 and c1 attributes != None\n\n\n\ncoordinates.merge_dihedrals(dihedral_key, interactionA, interactionB, interaction_typesA, interaction_typesB, topA, topB, funct, periodicity)\nMerge one to two Dihedrals or -Types into a Dihedral in free-energy syntax\n\n\n\ncoordinates.merge_top_parameter_growth(topA, topB, focus_nr=None)\nTakes two Topologies and joins them for a smooth free-energy like parameter transition simulation"
  },
  {
    "objectID": "_reference/coordinates.html#functions",
    "href": "_reference/coordinates.html#functions",
    "title": "coordinates",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_explicit_MultipleDihedrals\nTakes a valid dihedral key and returns explicit\n\n\nget_explicit_or_type\nTakes an Interaction and associated key, InteractionTypes, Topology\n\n\nis_parameterized\nParameterized topology entries have c0 and c1 attributes != None\n\n\nmerge_dihedrals\nMerge one to two Dihedrals or -Types into a Dihedral in free-energy syntax\n\n\nmerge_top_parameter_growth\nTakes two Topologies and joins them for a smooth free-energy like parameter transition simulation\n\n\n\n\n\ncoordinates.get_explicit_MultipleDihedrals(dihedral_key, top, dihedrals_in, periodicity_max=6)\nTakes a valid dihedral key and returns explicit dihedral parameters for a given topology\n\n\n\ncoordinates.get_explicit_or_type(key, interaction, interaction_types, top, periodicity='')\nTakes an Interaction and associated key, InteractionTypes, Topology and Periodicity (for dihedrals) and returns an object with the parameters of this Interaction\n\n\n\ncoordinates.is_parameterized(entry)\nParameterized topology entries have c0 and c1 attributes != None\n\n\n\ncoordinates.merge_dihedrals(dihedral_key, interactionA, interactionB, interaction_typesA, interaction_typesB, topA, topB, funct, periodicity)\nMerge one to two Dihedrals or -Types into a Dihedral in free-energy syntax\n\n\n\ncoordinates.merge_top_parameter_growth(topA, topB, focus_nr=None)\nTakes two Topologies and joins them for a smooth free-energy like parameter transition simulation"
  },
  {
    "objectID": "_reference/cmd.html",
    "href": "_reference/cmd.html",
    "title": "cmd",
    "section": "",
    "text": "cmd\nFunctions for starting KIMMDY either from python or the command line. Also initialized logging and configuration.\n\n\n\n\n\nName\nDescription\n\n\n\n\nbuild_examples\nBuild examples from the command line.\n\n\nconfigure_logging\nConfigure logging.\n\n\nget_build_example_args\nParse command line arguments.\n\n\nget_cmdline_args\nParse command line arguments and configure logger.\n\n\nkimmdy\nRun KIMMDY from the command line.\n\n\nkimmdy_run\nRun KIMMDY from python.\n\n\n\n\n\ncmd.build_examples()\nBuild examples from the command line.\n\n\n\ncmd.configure_logging(args, color=False)\nConfigure logging.\nConfigures the logging module with optional colorcodes for the terminal.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nargparse.Namespace\nCommand line arguments.\nrequired\n\n\ncolor\n\nShould logging output use colorcodes for terminal output?\nFalse\n\n\n\n\n\n\n\ncmd.get_build_example_args()\nParse command line arguments.\n\n\n\n\n\nType\nDescription\n\n\n\n\nNamespace\nparsed command line arguments\n\n\n\n\n\n\n\ncmd.get_cmdline_args()\nParse command line arguments and configure logger.\n\n\n\n\n\nType\nDescription\n\n\n\n\nNamespace\nparsed command line arguments\n\n\n\n\n\n\n\ncmd.kimmdy()\nRun KIMMDY from the command line.\nThe configuration is gathered from the input file, which is kimmdy.yml by default.\n\n\n\ncmd.kimmdy_run(input=Path('kimmdy.yml'), loglevel='DEBUG', logfile=Path('kimmdy.log'), checkpoint='', concat=False, show_plugins=False, show_schema_path=False, generate_jobscript=False)\nRun KIMMDY from python.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput\nPath\nkimmdy input yml file.\nPath('kimmdy.yml')\n\n\nloglevel\nstr\nLoglevel. One of [“INFO”, “WARNING”, “MESSAGE”, “DEBUG”]\n'DEBUG'\n\n\nlogfile\nPath\nFile path of the logfile.\nPath('kimmdy.log')\n\n\ncheckpoint\nstr\nFile path if a kimmdy.cpt file to restart KIMMDY from a checkpoint.\n''\n\n\nconcat\nbool\nDon’t perform a full KIMMDY run but instead concatenate trajectories from a previous run.\nFalse\n\n\nshow_plugins\nbool\nShow available plugins and exit.\nFalse\n\n\nshow_schema_path\nbool\nPrint path to yaml schema for use with yaml-language-server e.g. in VSCode and Neovim\nFalse\n\n\ngenerate_jobscript\nbool\nInstead of running KIMMDY directly, generate at jobscript.sh for slurm HPC clusters\nFalse"
  },
  {
    "objectID": "_reference/cmd.html#functions",
    "href": "_reference/cmd.html#functions",
    "title": "cmd",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nbuild_examples\nBuild examples from the command line.\n\n\nconfigure_logging\nConfigure logging.\n\n\nget_build_example_args\nParse command line arguments.\n\n\nget_cmdline_args\nParse command line arguments and configure logger.\n\n\nkimmdy\nRun KIMMDY from the command line.\n\n\nkimmdy_run\nRun KIMMDY from python.\n\n\n\n\n\ncmd.build_examples()\nBuild examples from the command line.\n\n\n\ncmd.configure_logging(args, color=False)\nConfigure logging.\nConfigures the logging module with optional colorcodes for the terminal.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nargparse.Namespace\nCommand line arguments.\nrequired\n\n\ncolor\n\nShould logging output use colorcodes for terminal output?\nFalse\n\n\n\n\n\n\n\ncmd.get_build_example_args()\nParse command line arguments.\n\n\n\n\n\nType\nDescription\n\n\n\n\nNamespace\nparsed command line arguments\n\n\n\n\n\n\n\ncmd.get_cmdline_args()\nParse command line arguments and configure logger.\n\n\n\n\n\nType\nDescription\n\n\n\n\nNamespace\nparsed command line arguments\n\n\n\n\n\n\n\ncmd.kimmdy()\nRun KIMMDY from the command line.\nThe configuration is gathered from the input file, which is kimmdy.yml by default.\n\n\n\ncmd.kimmdy_run(input=Path('kimmdy.yml'), loglevel='DEBUG', logfile=Path('kimmdy.log'), checkpoint='', concat=False, show_plugins=False, show_schema_path=False, generate_jobscript=False)\nRun KIMMDY from python.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput\nPath\nkimmdy input yml file.\nPath('kimmdy.yml')\n\n\nloglevel\nstr\nLoglevel. One of [“INFO”, “WARNING”, “MESSAGE”, “DEBUG”]\n'DEBUG'\n\n\nlogfile\nPath\nFile path of the logfile.\nPath('kimmdy.log')\n\n\ncheckpoint\nstr\nFile path if a kimmdy.cpt file to restart KIMMDY from a checkpoint.\n''\n\n\nconcat\nbool\nDon’t perform a full KIMMDY run but instead concatenate trajectories from a previous run.\nFalse\n\n\nshow_plugins\nbool\nShow available plugins and exit.\nFalse\n\n\nshow_schema_path\nbool\nPrint path to yaml schema for use with yaml-language-server e.g. in VSCode and Neovim\nFalse\n\n\ngenerate_jobscript\nbool\nInstead of running KIMMDY directly, generate at jobscript.sh for slurm HPC clusters\nFalse"
  },
  {
    "objectID": "_reference/dummyreaction.reaction.DummyReaction.html",
    "href": "_reference/dummyreaction.reaction.DummyReaction.html",
    "title": "dummyreaction.reaction.DummyReaction",
    "section": "",
    "text": "reaction.DummyReaction()\nDummy reaction, returns empty RecipeCollection\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_recipe_collection\n\n\n\n\n\n\nreaction.DummyReaction.get_recipe_collection(self, files)"
  },
  {
    "objectID": "_reference/dummyreaction.reaction.DummyReaction.html#methods",
    "href": "_reference/dummyreaction.reaction.DummyReaction.html#methods",
    "title": "dummyreaction.reaction.DummyReaction",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_recipe_collection\n\n\n\n\n\n\nreaction.DummyReaction.get_recipe_collection(self, files)"
  },
  {
    "objectID": "_reference/topology.utils.html",
    "href": "_reference/topology.utils.html",
    "title": "topology.utils",
    "section": "",
    "text": "topology.utils\n\n\n\n\n\nName\nDescription\n\n\n\n\nattributes_to_list\n\n\n\nfield_or_none\n\n\n\nget_by_permutations\n\n\n\nget_element_id\n\n\n\nget_protein_section\nGet content of a section in the first moleculetype (protein) from a topology dict.\n\n\nget_top_section\nGet content of a section from a topology dict.\n\n\nis_not_none\n\n\n\nmatch_atomic_item_to_atomic_type\n\n\n\nmatch_attr\n\n\n\nmatch_id_to_patch\n\n\n\nmatch_multi_attr\n\n\n\nset_protein_section\nSet content of a section in the first moleculetype (protein) from a topology dict.\n\n\nset_top_section\nSet content of a section from a topology dict.\n\n\n\n\n\ntopology.utils.attributes_to_list(obj)\n\n\n\ntopology.utils.field_or_none(l, i)\n\n\n\ntopology.utils.get_by_permutations(d, key)\n\n\n\ntopology.utils.get_element_id(e)\n\n\n\ntopology.utils.get_protein_section(top, name)\nGet content of a section in the first moleculetype (protein) from a topology dict.\n\n\n\ntopology.utils.get_top_section(top, name, moleculetype=None)\nGet content of a section from a topology dict. By resolving any #ifdef statements by check in the top['define'] dict and choosing the 'content' or 'else_content' depending on the result.\n\n\n\ntopology.utils.is_not_none(x)\n\n\n\ntopology.utils.match_atomic_item_to_atomic_type(id, types, periodicity='')\n\n\n\ntopology.utils.match_attr(patches, attr, m)\n\n\n\ntopology.utils.match_id_to_patch(id, patches)\n\n\n\ntopology.utils.match_multi_attr(patches, attrs, m)\n\n\n\ntopology.utils.set_protein_section(top, name, value)\nSet content of a section in the first moleculetype (protein) from a topology dict.\n\n\n\ntopology.utils.set_top_section(top, name, value, moleculetype=None)\nSet content of a section from a topology dict. By resolving any #ifdef statements by check in the top['define'] dict and choosing the 'content' or 'else_content' depending on the result."
  },
  {
    "objectID": "_reference/topology.utils.html#functions",
    "href": "_reference/topology.utils.html#functions",
    "title": "topology.utils",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nattributes_to_list\n\n\n\nfield_or_none\n\n\n\nget_by_permutations\n\n\n\nget_element_id\n\n\n\nget_protein_section\nGet content of a section in the first moleculetype (protein) from a topology dict.\n\n\nget_top_section\nGet content of a section from a topology dict.\n\n\nis_not_none\n\n\n\nmatch_atomic_item_to_atomic_type\n\n\n\nmatch_attr\n\n\n\nmatch_id_to_patch\n\n\n\nmatch_multi_attr\n\n\n\nset_protein_section\nSet content of a section in the first moleculetype (protein) from a topology dict.\n\n\nset_top_section\nSet content of a section from a topology dict.\n\n\n\n\n\ntopology.utils.attributes_to_list(obj)\n\n\n\ntopology.utils.field_or_none(l, i)\n\n\n\ntopology.utils.get_by_permutations(d, key)\n\n\n\ntopology.utils.get_element_id(e)\n\n\n\ntopology.utils.get_protein_section(top, name)\nGet content of a section in the first moleculetype (protein) from a topology dict.\n\n\n\ntopology.utils.get_top_section(top, name, moleculetype=None)\nGet content of a section from a topology dict. By resolving any #ifdef statements by check in the top['define'] dict and choosing the 'content' or 'else_content' depending on the result.\n\n\n\ntopology.utils.is_not_none(x)\n\n\n\ntopology.utils.match_atomic_item_to_atomic_type(id, types, periodicity='')\n\n\n\ntopology.utils.match_attr(patches, attr, m)\n\n\n\ntopology.utils.match_id_to_patch(id, patches)\n\n\n\ntopology.utils.match_multi_attr(patches, attrs, m)\n\n\n\ntopology.utils.set_protein_section(top, name, value)\nSet content of a section in the first moleculetype (protein) from a topology dict.\n\n\n\ntopology.utils.set_top_section(top, name, value, moleculetype=None)\nSet content of a section from a topology dict. By resolving any #ifdef statements by check in the top['define'] dict and choosing the 'content' or 'else_content' depending on the result."
  },
  {
    "objectID": "_reference/schema.html",
    "href": "_reference/schema.html",
    "title": "schema",
    "section": "",
    "text": "schema\nHandle the schema for the config file. To be used by the config module to validate the config file and set defaults for the Config object.\nReserved keywords: - pytype - default - description - type\n\n\n\n\n\nName\nDescription\n\n\n\n\nconvert_schema_to_dict\nConvert a dictionary from a raw json schema to a nested dictionary\n\n\nflatten_scheme\nRecursively get properties and their desicripions from the scheme\n\n\ngenerate_markdown_table\n\n\n\nget_combined_scheme\nReturn the schema for the config file.\n\n\nload_kimmdy_schema\nReturn the schema for the config file\n\n\nload_plugin_schemas\nReturn the schemas for the reaction plugins known to kimmdy\n\n\nprune\nRemove empty dicts from a nested dict\n\n\n\n\n\nschema.convert_schema_to_dict(dictionary)\nConvert a dictionary from a raw json schema to a nested dictionary\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndictionary\ndict\ndictionary from a raw json schema\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndict\nnested dictionary where each leaf entry is a dictionary with the “pytype”, “default” and “description” keys\n\n\n\n\n\n\n\nschema.flatten_scheme(scheme, section='')\nRecursively get properties and their desicripions from the scheme\n\n\n\nschema.generate_markdown_table(scheme, append=False)\n\n\n\nschema.get_combined_scheme()\nReturn the schema for the config file.\nNested scheme where each leaf entry is a dictionary with the \"pytype\", \"default\" and \"description\". Contains the schema for the main kimmdy config file and all the plugins known at runtime.\n\n\n\nschema.load_kimmdy_schema()\nReturn the schema for the config file\n\n\n\nschema.load_plugin_schemas()\nReturn the schemas for the reaction plugins known to kimmdy\n\n\n\nschema.prune(d)\nRemove empty dicts from a nested dict"
  },
  {
    "objectID": "_reference/schema.html#functions",
    "href": "_reference/schema.html#functions",
    "title": "schema",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nconvert_schema_to_dict\nConvert a dictionary from a raw json schema to a nested dictionary\n\n\nflatten_scheme\nRecursively get properties and their desicripions from the scheme\n\n\ngenerate_markdown_table\n\n\n\nget_combined_scheme\nReturn the schema for the config file.\n\n\nload_kimmdy_schema\nReturn the schema for the config file\n\n\nload_plugin_schemas\nReturn the schemas for the reaction plugins known to kimmdy\n\n\nprune\nRemove empty dicts from a nested dict\n\n\n\n\n\nschema.convert_schema_to_dict(dictionary)\nConvert a dictionary from a raw json schema to a nested dictionary\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndictionary\ndict\ndictionary from a raw json schema\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndict\nnested dictionary where each leaf entry is a dictionary with the “pytype”, “default” and “description” keys\n\n\n\n\n\n\n\nschema.flatten_scheme(scheme, section='')\nRecursively get properties and their desicripions from the scheme\n\n\n\nschema.generate_markdown_table(scheme, append=False)\n\n\n\nschema.get_combined_scheme()\nReturn the schema for the config file.\nNested scheme where each leaf entry is a dictionary with the \"pytype\", \"default\" and \"description\". Contains the schema for the main kimmdy config file and all the plugins known at runtime.\n\n\n\nschema.load_kimmdy_schema()\nReturn the schema for the config file\n\n\n\nschema.load_plugin_schemas()\nReturn the schemas for the reaction plugins known to kimmdy\n\n\n\nschema.prune(d)\nRemove empty dicts from a nested dict"
  },
  {
    "objectID": "_reference/tasks.html",
    "href": "_reference/tasks.html",
    "title": "tasks",
    "section": "",
    "text": "tasks\n\n\n\n\n\nName\nDescription\n\n\n\n\nTaskMapping"
  },
  {
    "objectID": "_reference/tasks.html#attributes",
    "href": "_reference/tasks.html#attributes",
    "title": "tasks",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nTaskMapping"
  },
  {
    "objectID": "_reference/topology.atomic.html",
    "href": "_reference/topology.atomic.html",
    "title": "topology.atomic",
    "section": "",
    "text": "topology.atomic\nAtomic datatypes for the topology such as Atom, Bond, Angle, Dihedral, etc. The order of the fields comes from the gromacs topology file format. See &lt;https://manual.gromacs.org/current/reference-manual/topologies/topology-file-formats.html#topology-file&gt;\n\n\n\n\n\nName\nDescription\n\n\n\n\nAngleId\n\n\n\nAtomId\n\n\n\nAtomic\n\n\n\nAtomicType\n\n\n\nAtomicTypes\n\n\n\nBondId\n\n\n\nDihedralId\n\n\n\nInteraction\n\n\n\nInteractionIds\n\n\n\nInteractionType\n\n\n\nInteractionTypes\n\n\n\nInteractions"
  },
  {
    "objectID": "_reference/topology.atomic.html#attributes",
    "href": "_reference/topology.atomic.html#attributes",
    "title": "topology.atomic",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nAngleId\n\n\n\nAtomId\n\n\n\nAtomic\n\n\n\nAtomicType\n\n\n\nAtomicTypes\n\n\n\nBondId\n\n\n\nDihedralId\n\n\n\nInteraction\n\n\n\nInteractionIds\n\n\n\nInteractionType\n\n\n\nInteractionTypes\n\n\n\nInteractions"
  },
  {
    "objectID": "_reference/runmanager.html",
    "href": "_reference/runmanager.html",
    "title": "runmanager",
    "section": "",
    "text": "runmanager\nThe Runmanager is the main entry point of the program.\nIt manages the queue of tasks, communicates with the rest of the program and keeps track of global state.\n\n\n\n\n\nName\nDescription\n\n\n\n\nAMBIGUOUS_SUFFS\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_existing_files\nInitialize latest_files with every existing file defined in config\n\n\n\n\n\nrunmanager.get_existing_files(config)\nInitialize latest_files with every existing file defined in config"
  },
  {
    "objectID": "_reference/runmanager.html#attributes",
    "href": "_reference/runmanager.html#attributes",
    "title": "runmanager",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nAMBIGUOUS_SUFFS"
  },
  {
    "objectID": "_reference/runmanager.html#functions",
    "href": "_reference/runmanager.html#functions",
    "title": "runmanager",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_existing_files\nInitialize latest_files with every existing file defined in config\n\n\n\n\n\nrunmanager.get_existing_files(config)\nInitialize latest_files with every existing file defined in config"
  },
  {
    "objectID": "_reference/constants.html",
    "href": "_reference/constants.html",
    "title": "constants",
    "section": "",
    "text": "constants\nComstants used throughout KIMMDY\n\n\n\n\n\nName\nDescription\n\n\n\n\nATOMTYPE_BONDORDER\nTo determin if an atom is a radical.\n\n\nATOMTYPE_BONDORDER_FLAT\nTo determin if an atom is a radical."
  },
  {
    "objectID": "_reference/constants.html#attributes",
    "href": "_reference/constants.html#attributes",
    "title": "constants",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nATOMTYPE_BONDORDER\nTo determin if an atom is a radical.\n\n\nATOMTYPE_BONDORDER_FLAT\nTo determin if an atom is a radical."
  },
  {
    "objectID": "_reference/homolysis.reaction.Homolysis.html",
    "href": "_reference/homolysis.reaction.Homolysis.html",
    "title": "homolysis.reaction.Homolysis",
    "section": "",
    "text": "reaction.Homolysis()\nHomolytic bond breaking leading to 2 radicals. Implementation for time-varying rates\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_recipe_collection\n\n\n\n\n\n\nreaction.Homolysis.get_recipe_collection(self, files)"
  },
  {
    "objectID": "_reference/homolysis.reaction.Homolysis.html#methods",
    "href": "_reference/homolysis.reaction.Homolysis.html#methods",
    "title": "homolysis.reaction.Homolysis",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_recipe_collection\n\n\n\n\n\n\nreaction.Homolysis.get_recipe_collection(self, files)"
  },
  {
    "objectID": "_reference/kmc.html",
    "href": "_reference/kmc.html",
    "title": "kmc",
    "section": "",
    "text": "kmc\nKinetic Monte Carlo (KMC) classes and functions.\nIn our system, the reaction rate r = (deterministic) reaction constant k = stochastic reaction constant c (from gillespie 1977) = propensity a (from Anderson 2007) because of the fundamental premise of chemical kinetics and because we have one reactant molecule\n\n\n\n\n\nName\nDescription\n\n\n\n\nfrm\nFirst Reaction Method variant of Kinetic Monte Carlo.\n\n\nrf_kmc\nRejection-Free Monte Carlo.\n\n\n\n\n\nkmc.frm(recipe_collection, rng=default_rng(), MD_time=None)\nFirst Reaction Method variant of Kinetic Monte Carlo. takes RecipeCollection and choses a recipe based on which reaction would occur.\nCompare e.g. &lt;https://en.wikipedia.org/wiki/Kinetic_Monte_Carlo#Time-dependent_Algorithms&gt;\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_collection\nRecipeCollection\nfrom which one will be choosen\nrequired\n\n\nrng\nnp.random.BitGenerator\nto generate random numbers in the KMC step\ndefault_rng()\n\n\nMD_time\nUnion[float, None]\ntime [ps] to compare conformational events with reaction events in the time domain\nNone\n\n\n\n\n\n\n\nkmc.rf_kmc(recipe_collection, rng=default_rng())\nRejection-Free Monte Carlo. takes RecipeCollection and choses a recipe based on the relative propensity of the events.\nCompare e.g. &lt;https://en.wikipedia.org/wiki/Kinetic_Monte_Carlo#Rejection-free_KMC&gt;\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_collection\nRecipeCollection\nfrom which one will be choosen\nrequired\n\n\nrng\nnp.random.BitGenerator\nfunction to generate random numbers in the KMC step\ndefault_rng()"
  },
  {
    "objectID": "_reference/kmc.html#functions",
    "href": "_reference/kmc.html#functions",
    "title": "kmc",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfrm\nFirst Reaction Method variant of Kinetic Monte Carlo.\n\n\nrf_kmc\nRejection-Free Monte Carlo.\n\n\n\n\n\nkmc.frm(recipe_collection, rng=default_rng(), MD_time=None)\nFirst Reaction Method variant of Kinetic Monte Carlo. takes RecipeCollection and choses a recipe based on which reaction would occur.\nCompare e.g. &lt;https://en.wikipedia.org/wiki/Kinetic_Monte_Carlo#Time-dependent_Algorithms&gt;\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_collection\nRecipeCollection\nfrom which one will be choosen\nrequired\n\n\nrng\nnp.random.BitGenerator\nto generate random numbers in the KMC step\ndefault_rng()\n\n\nMD_time\nUnion[float, None]\ntime [ps] to compare conformational events with reaction events in the time domain\nNone\n\n\n\n\n\n\n\nkmc.rf_kmc(recipe_collection, rng=default_rng())\nRejection-Free Monte Carlo. takes RecipeCollection and choses a recipe based on the relative propensity of the events.\nCompare e.g. &lt;https://en.wikipedia.org/wiki/Kinetic_Monte_Carlo#Rejection-free_KMC&gt;\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrecipe_collection\nRecipeCollection\nfrom which one will be choosen\nrequired\n\n\nrng\nnp.random.BitGenerator\nfunction to generate random numbers in the KMC step\ndefault_rng()"
  },
  {
    "objectID": "_reference/index.html",
    "href": "_reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Start KIMMDY from a python script or the command line\n\n\n\ncmd\nFunctions for starting KIMMDY either from python or the command line.\n\n\n\n\n\n\nTopology modules\n\n\n\ntopology.topology\n\n\n\ntopology.ff\n\n\n\ntopology.utils\n\n\n\ntopology.atomic\nAtomic datatypes for the topology such as Atom, Bond, Angle, Dihedral, etc.\n\n\n\n\n\n\nModules\n\n\n\nchangemanager\nThe changemanager module holds functions that modify the system\n\n\nconstants\nComstants used throughout KIMMDY\n\n\ncoordinates\n\n\n\nconfig\nRead and validate kimmdy.yml configuration files\n\n\nschema\nHandle the schema for the config file.\n\n\nkmc\nKinetic Monte Carlo (KMC) classes and functions.\n\n\nmisc_helper\nMiscelaneous utilitiies that didn't fit anywhere else for now.\n\n\nparsing\nAll read_&lt;…&gt; and write_&lt;…&gt; functions.\n\n\nrunmanager\nThe Runmanager is the main entry point of the program.\n\n\ntasks\n\n\n\nutils\n\n\n\nreaction\nReactionPlugin protocoll and reaction recipes.\n\n\n\n\n\n\nReaction plugins bundled with KIMMDY and the protocol to add a new reaction plugin to KIMMDY\n\n\n\nhomolysis.reaction.Homolysis\nHomolytic bond breaking leading to 2 radicals.\n\n\nhat_naive.reaction.NaiveHAT\nNaive HAT reaction, selects hydrogens at random\n\n\ndummyreaction.reaction.DummyReaction\nDummy reaction, returns empty RecipeCollection"
  },
  {
    "objectID": "_reference/index.html#api",
    "href": "_reference/index.html#api",
    "title": "Reference",
    "section": "",
    "text": "Start KIMMDY from a python script or the command line\n\n\n\ncmd\nFunctions for starting KIMMDY either from python or the command line."
  },
  {
    "objectID": "_reference/index.html#topology",
    "href": "_reference/index.html#topology",
    "title": "Reference",
    "section": "",
    "text": "Topology modules\n\n\n\ntopology.topology\n\n\n\ntopology.ff\n\n\n\ntopology.utils\n\n\n\ntopology.atomic\nAtomic datatypes for the topology such as Atom, Bond, Angle, Dihedral, etc."
  },
  {
    "objectID": "_reference/index.html#modules",
    "href": "_reference/index.html#modules",
    "title": "Reference",
    "section": "",
    "text": "Modules\n\n\n\nchangemanager\nThe changemanager module holds functions that modify the system\n\n\nconstants\nComstants used throughout KIMMDY\n\n\ncoordinates\n\n\n\nconfig\nRead and validate kimmdy.yml configuration files\n\n\nschema\nHandle the schema for the config file.\n\n\nkmc\nKinetic Monte Carlo (KMC) classes and functions.\n\n\nmisc_helper\nMiscelaneous utilitiies that didn't fit anywhere else for now.\n\n\nparsing\nAll read_&lt;…&gt; and write_&lt;…&gt; functions.\n\n\nrunmanager\nThe Runmanager is the main entry point of the program.\n\n\ntasks\n\n\n\nutils\n\n\n\nreaction\nReactionPlugin protocoll and reaction recipes."
  },
  {
    "objectID": "_reference/index.html#reaction-plugins",
    "href": "_reference/index.html#reaction-plugins",
    "title": "Reference",
    "section": "",
    "text": "Reaction plugins bundled with KIMMDY and the protocol to add a new reaction plugin to KIMMDY\n\n\n\nhomolysis.reaction.Homolysis\nHomolytic bond breaking leading to 2 radicals.\n\n\nhat_naive.reaction.NaiveHAT\nNaive HAT reaction, selects hydrogens at random\n\n\ndummyreaction.reaction.DummyReaction\nDummy reaction, returns empty RecipeCollection"
  },
  {
    "objectID": "_reference/topology.topology.html",
    "href": "_reference/topology.topology.html",
    "title": "topology.topology",
    "section": "",
    "text": "topology.topology\n\n\n\n\n\nName\nDescription\n\n\n\n\nPROTEIN_SECTION"
  },
  {
    "objectID": "_reference/topology.topology.html#attributes",
    "href": "_reference/topology.topology.html#attributes",
    "title": "topology.topology",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nPROTEIN_SECTION"
  },
  {
    "objectID": "_reference/misc_helper.html",
    "href": "_reference/misc_helper.html",
    "title": "misc_helper",
    "section": "",
    "text": "misc_helper\nMiscelaneous utilitiies that didn't fit anywhere else for now.\n\n\n\n\n\nName\nDescription\n\n\n\n\nconcat_traj\nFind and concatenate trajectories from KIMMDY runs.\n\n\nedgelist_to_dot_graph\n\n\n\ntop_to_graph\n\n\n\ntopology_to_edgelist\n\n\n\n\n\n\nmisc_helper.concat_traj(run_dir, out=None, run_types=None)\nFind and concatenate trajectories from KIMMDY runs.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrun_dir\nPath | str\nDirectory containing directories of multiple tasks.\nrequired\n\n\nout\nPath\nFile Path into the output trr will be written. Default concat.trr in given run_dir\nNone\n\n\nrun_types\nlist\nList of tasks to get trrs from. If a task is not in this list it will be skipped. By default None\nNone\n\n\n\n\n\n\n\nmisc_helper.edgelist_to_dot_graph(ls, overlap='true')\n\n\n\nmisc_helper.top_to_graph(top, overlap='true')\n\n\n\nmisc_helper.topology_to_edgelist(top)"
  },
  {
    "objectID": "_reference/misc_helper.html#functions",
    "href": "_reference/misc_helper.html#functions",
    "title": "misc_helper",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nconcat_traj\nFind and concatenate trajectories from KIMMDY runs.\n\n\nedgelist_to_dot_graph\n\n\n\ntop_to_graph\n\n\n\ntopology_to_edgelist\n\n\n\n\n\n\nmisc_helper.concat_traj(run_dir, out=None, run_types=None)\nFind and concatenate trajectories from KIMMDY runs.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrun_dir\nPath | str\nDirectory containing directories of multiple tasks.\nrequired\n\n\nout\nPath\nFile Path into the output trr will be written. Default concat.trr in given run_dir\nNone\n\n\nrun_types\nlist\nList of tasks to get trrs from. If a task is not in this list it will be skipped. By default None\nNone\n\n\n\n\n\n\n\nmisc_helper.edgelist_to_dot_graph(ls, overlap='true')\n\n\n\nmisc_helper.top_to_graph(top, overlap='true')\n\n\n\nmisc_helper.topology_to_edgelist(top)"
  },
  {
    "objectID": "_reference/utils.html",
    "href": "_reference/utils.html",
    "title": "utils",
    "section": "",
    "text": "utils\n\n\n\n\n\nName\nDescription\n\n\n\n\ncheck_gmx_version\nCheck for an existing gromacs installation.\n\n\nget_atominfo_from_plumedid\nreturns atomtypes for a plumedid with information from the plumed and topology file\n\n\nget_bondprm_from_atomtypes\nreturns bond parameters (b0, kb, E_dis) for a set of atomtypes\n\n\nget_gmx_dir\nreturns the path to the gromacs installation\n\n\nget_shell_stdout\n\n\n\nincrement_logfile\n\n\n\nmorse_transition_rate\ncalculates energy barrier crossing rate [in ps]; barrier based on the model V = V_morse - F*X\n\n\nrun_gmx\n\n\n\nrun_shell_cmd\n\n\n\n\n\n\nutils.check_gmx_version(config)\nCheck for an existing gromacs installation.\nIf PLUMED is meant to be used it additionally checks for the keyword 'MODIFIED' or 'plumed' in the version name.\n\n\n\nutils.get_atominfo_from_plumedid(plumedid, plumed, top)\nreturns atomtypes for a plumedid with information from the plumed and topology file\n\n\n\nutils.get_bondprm_from_atomtypes(atomtypes, ffbonded, lookup_edissoc_atomtype)\nreturns bond parameters (b0, kb, E_dis) for a set of atomtypes\n\n\n\nutils.get_gmx_dir()\nreturns the path to the gromacs installation\n\n\n\nutils.get_shell_stdout(s)\n\n\n\nutils.increment_logfile(f)\n\n\n\nutils.morse_transition_rate(r_curr, r_0, E_dis, k_f, k_0=0.288, kT=2.479)\ncalculates energy barrier crossing rate [in ps]; barrier based on the model V = V_morse - F*X\n\n\n\nutils.run_gmx(s, cwd=None)\n\n\n\nutils.run_shell_cmd(s, cwd=None)"
  },
  {
    "objectID": "_reference/utils.html#functions",
    "href": "_reference/utils.html#functions",
    "title": "utils",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncheck_gmx_version\nCheck for an existing gromacs installation.\n\n\nget_atominfo_from_plumedid\nreturns atomtypes for a plumedid with information from the plumed and topology file\n\n\nget_bondprm_from_atomtypes\nreturns bond parameters (b0, kb, E_dis) for a set of atomtypes\n\n\nget_gmx_dir\nreturns the path to the gromacs installation\n\n\nget_shell_stdout\n\n\n\nincrement_logfile\n\n\n\nmorse_transition_rate\ncalculates energy barrier crossing rate [in ps]; barrier based on the model V = V_morse - F*X\n\n\nrun_gmx\n\n\n\nrun_shell_cmd\n\n\n\n\n\n\nutils.check_gmx_version(config)\nCheck for an existing gromacs installation.\nIf PLUMED is meant to be used it additionally checks for the keyword 'MODIFIED' or 'plumed' in the version name.\n\n\n\nutils.get_atominfo_from_plumedid(plumedid, plumed, top)\nreturns atomtypes for a plumedid with information from the plumed and topology file\n\n\n\nutils.get_bondprm_from_atomtypes(atomtypes, ffbonded, lookup_edissoc_atomtype)\nreturns bond parameters (b0, kb, E_dis) for a set of atomtypes\n\n\n\nutils.get_gmx_dir()\nreturns the path to the gromacs installation\n\n\n\nutils.get_shell_stdout(s)\n\n\n\nutils.increment_logfile(f)\n\n\n\nutils.morse_transition_rate(r_curr, r_0, E_dis, k_f, k_0=0.288, kT=2.479)\ncalculates energy barrier crossing rate [in ps]; barrier based on the model V = V_morse - F*X\n\n\n\nutils.run_gmx(s, cwd=None)\n\n\n\nutils.run_shell_cmd(s, cwd=None)"
  },
  {
    "objectID": "_reference/topology.ff.html",
    "href": "_reference/topology.ff.html",
    "title": "topology.ff",
    "section": "",
    "text": "topology.ff\n\n\n\n\n\nName\nDescription\n\n\n\n\nPatch\n\n\n\nPatches\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nprops_to_patches\n\n\n\n\n\n\ntopology.ff.props_to_patches(props)"
  },
  {
    "objectID": "_reference/topology.ff.html#attributes",
    "href": "_reference/topology.ff.html#attributes",
    "title": "topology.ff",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nPatch\n\n\n\nPatches"
  },
  {
    "objectID": "_reference/topology.ff.html#functions",
    "href": "_reference/topology.ff.html#functions",
    "title": "topology.ff",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nprops_to_patches\n\n\n\n\n\n\ntopology.ff.props_to_patches(props)"
  },
  {
    "objectID": "_reference/config.html",
    "href": "_reference/config.html",
    "title": "config",
    "section": "",
    "text": "config\nRead and validate kimmdy.yml configuration files and package into a parsed format for internal use.\n\n\n\n\n\nName\nDescription\n\n\n\n\nGMX_BUILTIN_FF_DIR\nPath to gromacs data directory with the built-in forcefields.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncheck_file_exists\n\n\n\n\n\n\nconfig.check_file_exists(p)"
  },
  {
    "objectID": "_reference/config.html#attributes",
    "href": "_reference/config.html#attributes",
    "title": "config",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nGMX_BUILTIN_FF_DIR\nPath to gromacs data directory with the built-in forcefields."
  },
  {
    "objectID": "_reference/config.html#functions",
    "href": "_reference/config.html#functions",
    "title": "config",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncheck_file_exists\n\n\n\n\n\n\nconfig.check_file_exists(p)"
  },
  {
    "objectID": "_reference/reaction.html",
    "href": "_reference/reaction.html",
    "title": "reaction",
    "section": "",
    "text": "reaction\nreaction\nReactionPlugin protocoll and reaction recipes.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "guide/user/options.html",
    "href": "guide/user/options.html",
    "title": "KIMMDY Options",
    "section": "",
    "text": "KIMMDY comes with autocompletion for the kimmdy.yml file. Run kimmdy --show-schema-path to get the path to the schema file. Then, add the following to either the top of your kimmmdy.yml file or add the schema to the global configuration of the yaml-language-server in your editor (e.g. VS Code or Neovim).\n\n\nkimmdy.yml\n\n# yaml-language-server: $schema=/your/path/to/kimmdy-yaml-schema.json\n\nOnce KIMMDY is public, you can replace the path with the following url:\n\n\nkimmdy.yml\n\n# yaml-language-server: $schema=https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/src/kimmdy/kimmdy-yaml-schema.json"
  },
  {
    "objectID": "guide/user/options.html#autocompletion",
    "href": "guide/user/options.html#autocompletion",
    "title": "KIMMDY Options",
    "section": "",
    "text": "KIMMDY comes with autocompletion for the kimmdy.yml file. Run kimmdy --show-schema-path to get the path to the schema file. Then, add the following to either the top of your kimmmdy.yml file or add the schema to the global configuration of the yaml-language-server in your editor (e.g. VS Code or Neovim).\n\n\nkimmdy.yml\n\n# yaml-language-server: $schema=/your/path/to/kimmdy-yaml-schema.json\n\nOnce KIMMDY is public, you can replace the path with the following url:\n\n\nkimmdy.yml\n\n# yaml-language-server: $schema=https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/src/kimmdy/kimmdy-yaml-schema.json"
  },
  {
    "objectID": "guide/user/options.html#all-options",
    "href": "guide/user/options.html#all-options",
    "title": "KIMMDY Options",
    "section": "All Options",
    "text": "All Options\nThe following is a list of the options that can be set in the kimmdy.yml file. It includes reactions currently available in KIMMDY as plugins. Nested options are separated by a .. * denotes an arbitrary name for a section. The key for a section is bold.\n\n\nTable 1: KIMMDY options\n\n\n\n\n\n\n\n\n\nOption\nDescription\nType\nDefault\n\n\n\n\n\ndryrun\nDon’t run the actual simulations, just print the tasks\nbool\nFalse\n\n\n\ncwd\nWorking directory\nPath\n.\n\n\n\nname\nUsed for output folder if out is not specified\nstr\nkimmdy\n\n\n\nout\nOutput folder\nPath\n\n\n\n\nmax_tasks\nMaximum number of tasks to run. This is useful when a task in the sequence can dymanically add more tasks. 0 means no limit.\nint\n0\n\n\n\nrun\nReplica number\nint\n1\n\n\n\ntop\nTopology file\nPath\ntopol.top\n\n\n\ngro\nCoordinate file\nPath\nconf.gro\n\n\n\nndx\nIndex file\nPath\nindex.ndx\n\n\n\ngromacs_alias\nGromacs alias\nstr\ngmx\n\n\n\ngmx_mdrun_flags\nFlags passed to gmx mdrun. e.g. -nt 8 -maxh 24\nstr\n-maxh 24 -dlb yes\n\n\n\nmaxh\nMaximum number of hours to run KIMMDY until it stops to aviod running out of time on the cluster. This enables graceful shutdown of KIMMDY and allows it to resume from the last checkpoint e.g. via a jobscript.\nint\n24\n\n\n\nff\nForce field directory (looks for .ff in cwd if not set)\nPath\n*.ff\n\n\n\nmds\nSettings for MD steps, e.g. mdp files, plumed files, etc.\n\n\n\n\n\nmds.*.mdp\nMDP file for the MD step\nPath\n\n\n\n\nmds.*.prefix\nTODO: What is this?\nstr\n\n\n\n\nmds.*.overwrite\nTODO: What is this?\nstr\n\n\n\n\nmds.*.plumed\n\n\n\n\n\n\nchanger\nSettings for the coordinate changer\n\n\n\n\n\nchanger.coordinates.md\n\nstr\n\n\n\n\nchanger.coordinates.md_parameter_growth\n\nstr\n\n\n\n\nsequence\nList of tasks. Each task can be a string (the name of the task) or an object with the task name and a multiplicity mult: &lt;int&gt;\nSequence\n\n\n\n\nreactions\nSettings for reactions\n\n\n\n\n\nreactions.homolysis.edis\nDissociation energies data file\nPath\nedissoc.dat\n\n\n\nreactions.homolysis.itp\nAdditional itp file with bonded parameters\nPath\nffbonded.itp"
  },
  {
    "objectID": "guide/user/options.html#example-kimmdy.yml-files",
    "href": "guide/user/options.html#example-kimmdy.yml-files",
    "title": "KIMMDY Options",
    "section": "Example kimmdy.yml Files",
    "text": "Example kimmdy.yml Files\n\n\nkimmdy.yml\n\ndryrun: false\nmax_tasks: 100\nname: 'hat_tf_000'\ngromacs_alias: 'gmx'\ntop: 'Ala_out.top'\ngro: 'npt.gro'\nndx: 'index.ndx'\nmds:\n  equilibrium:\n    mdp: 'md.mdp'\n  relax:\n    mdp: 'md_slow.mdp'\nchanger:\n  coordinates:\n    md: 'relax'      \nreactions:\n  hat_reaction:\n    frequency_factor: 100000000\n    h_cutoff: 3\n    polling_rate: 1\n\nsequence:\n- equilibrium\n- mult: 2\n  tasks:\n  - equilibrium\n  - reactions"
  },
  {
    "objectID": "guide/user/index.html",
    "href": "guide/user/index.html",
    "title": "User",
    "section": "",
    "text": "Resources for users.\n\n\n\n Back to top"
  },
  {
    "objectID": "guide/getting-started.html",
    "href": "guide/getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Let’s jump right in!\n\n\n\n\n\npython3.9 or higher\ngromacs (tested with version 2021.4, gmx should be available in the PATH)\n\nOptional:\n\nplumed-patched version of gromacs\n\n\n\n\n\nLet’s first create a virtual environment for kimmdy:\nmkdir kimmdy-tutorial\ncd kimmdy-tutorial\npython -m venv .venv\nsource .venv/bin/activate\nBecause we’ll be using optional reaction plugins directly from the git repository, we’ll need to install kimmdy from GitHub with the plugins extra:\n# TODO: update with https instead of ssh when repo is public\npip install 'git+ssh://git@github.com/hits-mbm-dev/kimmdy.git#egg=kimmdy[plugins]'\n# pip install 'git+ssh://git@github.com/hits-mbm-dev/kimmdy.git#egg&subdirectory=plugins'\n# pip install 'git+ssh://git@github.com/hits-mbm-dev/kimmdy.git@docs/config-completion#egg=kimmdy[plugins]'\n\n\n\nDownload the example kimmdy.yml file to this directory. It should look like this:\n\n\nkimmdy.yml\n\ndryrun: false\nmax_tasks: 100\nname: 'hat_tf_000'\ngromacs_alias: 'gmx'\ntop: 'Ala_out.top'\ngro: 'npt.gro'\nndx: 'index.ndx'\nmds:\n  equilibrium:\n    mdp: 'md.mdp'\n  relax:\n    mdp: 'md_slow.mdp'\nchanger:\n  coordinates:\n    md: 'relax'      \nreactions:\n  hat_reaction:\n    frequency_factor: 100000000\n    h_cutoff: 3\n    polling_rate: 1\n\nsequence:\n- equilibrium\n- mult: 2\n  tasks:\n  - equilibrium\n  - reactions\n\nLet’s also fetch the other input files:\n\nAla_out.top\nnpt.gro\ncat-center.gro\nindex.ndx\nmd.mdp\nmd_slow.mdp\nminim.mdp\n\nOr from the command line:\n# TODO: update when repo is public\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/Ala_out.top\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/npt.gro\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/cat-center.gro\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/index.ndx\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/md.mdp\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/md_slow.mdp\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/minim.mdp\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/kimmdy.yml\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/amber99sb-star-ildnp.ff\n\n# TODO: while dev, copy from example dir\ncp ../../example/example_ala/Ala_out.top .\ncp ../../example/example_ala/npt.gro .\ncp ../../example/example_ala/cat-center.gro .\ncp ../../example/example_ala/index.ndx .\ncp ../../example/example_ala/md.mdp .\ncp ../../example/example_ala/md_slow.mdp .\ncp ../../example/example_ala/minim.mdp .\ncp ../../example/example_ala/kimmdy.yml .\ncp -r ../../example/example_ala/amber99sb-star-ildnp.ff .\nOur starting structure is a simple ACE/NME-capped Alanine molecule in a box of water.\n    \n    \n    \nStart a KIMMDY run with kimmdy command:\n\n\n\nkimmdy\nYou can also run kimmdy directly from python with\nfrom kimmdy.cmd import kimmdy_run\nkimmdy_run()\n\n\n\nConcatenate the trajectories from the individual steps into one for viewing:\nkimmdy --concat\nor from python:\nkimmdy_run(concat = True)"
  },
  {
    "objectID": "guide/getting-started.html#installation",
    "href": "guide/getting-started.html#installation",
    "title": "Getting Started",
    "section": "",
    "text": "python3.9 or higher\ngromacs (tested with version 2021.4, gmx should be available in the PATH)\n\nOptional:\n\nplumed-patched version of gromacs"
  },
  {
    "objectID": "guide/getting-started.html#installation-1",
    "href": "guide/getting-started.html#installation-1",
    "title": "Getting Started",
    "section": "",
    "text": "Let’s first create a virtual environment for kimmdy:\nmkdir kimmdy-tutorial\ncd kimmdy-tutorial\npython -m venv .venv\nsource .venv/bin/activate\nBecause we’ll be using optional reaction plugins directly from the git repository, we’ll need to install kimmdy from GitHub with the plugins extra:\n# TODO: update with https instead of ssh when repo is public\npip install 'git+ssh://git@github.com/hits-mbm-dev/kimmdy.git#egg=kimmdy[plugins]'\n# pip install 'git+ssh://git@github.com/hits-mbm-dev/kimmdy.git#egg&subdirectory=plugins'\n# pip install 'git+ssh://git@github.com/hits-mbm-dev/kimmdy.git@docs/config-completion#egg=kimmdy[plugins]'"
  },
  {
    "objectID": "guide/getting-started.html#setup-the-simulation",
    "href": "guide/getting-started.html#setup-the-simulation",
    "title": "Getting Started",
    "section": "",
    "text": "Download the example kimmdy.yml file to this directory. It should look like this:\n\n\nkimmdy.yml\n\ndryrun: false\nmax_tasks: 100\nname: 'hat_tf_000'\ngromacs_alias: 'gmx'\ntop: 'Ala_out.top'\ngro: 'npt.gro'\nndx: 'index.ndx'\nmds:\n  equilibrium:\n    mdp: 'md.mdp'\n  relax:\n    mdp: 'md_slow.mdp'\nchanger:\n  coordinates:\n    md: 'relax'      \nreactions:\n  hat_reaction:\n    frequency_factor: 100000000\n    h_cutoff: 3\n    polling_rate: 1\n\nsequence:\n- equilibrium\n- mult: 2\n  tasks:\n  - equilibrium\n  - reactions\n\nLet’s also fetch the other input files:\n\nAla_out.top\nnpt.gro\ncat-center.gro\nindex.ndx\nmd.mdp\nmd_slow.mdp\nminim.mdp\n\nOr from the command line:\n# TODO: update when repo is public\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/Ala_out.top\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/npt.gro\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/cat-center.gro\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/index.ndx\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/md.mdp\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/md_slow.mdp\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/minim.mdp\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/kimmdy.yml\nwget https://raw.githubusercontent.com/hits-mbm-dev/kimmdy/main/example/example_ala/amber99sb-star-ildnp.ff\n\n# TODO: while dev, copy from example dir\ncp ../../example/example_ala/Ala_out.top .\ncp ../../example/example_ala/npt.gro .\ncp ../../example/example_ala/cat-center.gro .\ncp ../../example/example_ala/index.ndx .\ncp ../../example/example_ala/md.mdp .\ncp ../../example/example_ala/md_slow.mdp .\ncp ../../example/example_ala/minim.mdp .\ncp ../../example/example_ala/kimmdy.yml .\ncp -r ../../example/example_ala/amber99sb-star-ildnp.ff .\nOur starting structure is a simple ACE/NME-capped Alanine molecule in a box of water.\n    \n    \n    \nStart a KIMMDY run with kimmdy command:"
  },
  {
    "objectID": "guide/getting-started.html#run-the-simulation",
    "href": "guide/getting-started.html#run-the-simulation",
    "title": "Getting Started",
    "section": "",
    "text": "kimmdy\nYou can also run kimmdy directly from python with\nfrom kimmdy.cmd import kimmdy_run\nkimmdy_run()"
  },
  {
    "objectID": "guide/getting-started.html#analyse-the-simulation",
    "href": "guide/getting-started.html#analyse-the-simulation",
    "title": "Getting Started",
    "section": "",
    "text": "Concatenate the trajectories from the individual steps into one for viewing:\nkimmdy --concat\nor from python:\nkimmdy_run(concat = True)"
  },
  {
    "objectID": "guide/developer/plugins.html",
    "href": "guide/developer/plugins.html",
    "title": "Writing Reaction Plugins",
    "section": "",
    "text": "Writing Reaction Plugins\nTODO\n\n\n\n\n Back to top"
  },
  {
    "objectID": "guide/developer/topology.html",
    "href": "guide/developer/topology.html",
    "title": "Hexala topology",
    "section": "",
    "text": "Hexala\n\nfrom kimmdy.parsing import read_top\nfrom kimmdy.topology.topology import Topology\nfrom pathlib import Path\nfrom kimmdy.misc_helper import top_to_graph\n\n\nala_top = read_top(Path('../../tests/test_files/test_topology/hexala.top'))\ntop = Topology(ala_top)\n\nls = top_to_graph(top) \nwith open(\"ala-top.dot\", \"w\") as f:\n  f.writelines(ls)\n\n\n\n\n\n\n\n\n\nG\n\n  \n\n1 CT\n\n 1 CT   \n\n2 HC\n\n 2 HC   \n\n1 CT–2 HC\n\n   \n\n3 HC\n\n 3 HC   \n\n1 CT–3 HC\n\n   \n\n4 HC\n\n 4 HC   \n\n1 CT–4 HC\n\n   \n\n5 C\n\n 5 C   \n\n1 CT–5 C\n\n   \n\n6 O\n\n 6 O   \n\n5 C–6 O\n\n   \n\n7 N\n\n 7 N   \n\n5 C–7 N\n\n   \n\n8 H\n\n 8 H   \n\n7 N–8 H\n\n   \n\n9 CT\n\n 9 CT   \n\n7 N–9 CT\n\n   \n\n10 H1\n\n 10 H1   \n\n9 CT–10 H1\n\n   \n\n11 CT\n\n 11 CT   \n\n9 CT–11 CT\n\n   \n\n15 C\n\n 15 C   \n\n9 CT–15 C\n\n   \n\n12 HC\n\n 12 HC   \n\n11 CT–12 HC\n\n   \n\n13 HC\n\n 13 HC   \n\n11 CT–13 HC\n\n   \n\n14 HC\n\n 14 HC   \n\n11 CT–14 HC\n\n   \n\n16 O\n\n 16 O   \n\n15 C–16 O\n\n   \n\n17 N\n\n 17 N   \n\n15 C–17 N\n\n   \n\n18 H\n\n 18 H   \n\n17 N–18 H\n\n   \n\n19 CT\n\n 19 CT   \n\n17 N–19 CT\n\n   \n\n20 H1\n\n 20 H1   \n\n19 CT–20 H1\n\n   \n\n21 CT\n\n 21 CT   \n\n19 CT–21 CT\n\n   \n\n25 C\n\n 25 C   \n\n19 CT–25 C\n\n   \n\n22 HC\n\n 22 HC   \n\n21 CT–22 HC\n\n   \n\n23 HC\n\n 23 HC   \n\n21 CT–23 HC\n\n   \n\n24 HC\n\n 24 HC   \n\n21 CT–24 HC\n\n   \n\n26 O\n\n 26 O   \n\n25 C–26 O\n\n   \n\n27 N\n\n 27 N   \n\n25 C–27 N\n\n   \n\n28 H\n\n 28 H   \n\n27 N–28 H\n\n   \n\n29 CT\n\n 29 CT   \n\n27 N–29 CT\n\n   \n\n30 H1\n\n 30 H1   \n\n29 CT–30 H1\n\n   \n\n31 CT\n\n 31 CT   \n\n29 CT–31 CT\n\n   \n\n35 C\n\n 35 C   \n\n29 CT–35 C\n\n   \n\n32 HC\n\n 32 HC   \n\n31 CT–32 HC\n\n   \n\n33 HC\n\n 33 HC   \n\n31 CT–33 HC\n\n   \n\n34 HC\n\n 34 HC   \n\n31 CT–34 HC\n\n   \n\n36 O\n\n 36 O   \n\n35 C–36 O\n\n   \n\n37 N\n\n 37 N   \n\n35 C–37 N\n\n   \n\n38 H\n\n 38 H   \n\n37 N–38 H\n\n   \n\n39 CT\n\n 39 CT   \n\n37 N–39 CT\n\n   \n\n40 H1\n\n 40 H1   \n\n39 CT–40 H1\n\n   \n\n41 CT\n\n 41 CT   \n\n39 CT–41 CT\n\n   \n\n45 C\n\n 45 C   \n\n39 CT–45 C\n\n   \n\n42 HC\n\n 42 HC   \n\n41 CT–42 HC\n\n   \n\n43 HC\n\n 43 HC   \n\n41 CT–43 HC\n\n   \n\n44 HC\n\n 44 HC   \n\n41 CT–44 HC\n\n   \n\n46 O\n\n 46 O   \n\n45 C–46 O\n\n   \n\n47 N\n\n 47 N   \n\n45 C–47 N\n\n   \n\n48 H\n\n 48 H   \n\n47 N–48 H\n\n   \n\n49 CT\n\n 49 CT   \n\n47 N–49 CT\n\n   \n\n50 H1\n\n 50 H1   \n\n49 CT–50 H1\n\n   \n\n51 CT\n\n 51 CT   \n\n49 CT–51 CT\n\n   \n\n55 C\n\n 55 C   \n\n49 CT–55 C\n\n   \n\n52 HC\n\n 52 HC   \n\n51 CT–52 HC\n\n   \n\n53 HC\n\n 53 HC   \n\n51 CT–53 HC\n\n   \n\n54 HC\n\n 54 HC   \n\n51 CT–54 HC\n\n   \n\n56 O\n\n 56 O   \n\n55 C–56 O\n\n   \n\n57 N\n\n 57 N   \n\n55 C–57 N\n\n   \n\n58 H\n\n 58 H   \n\n57 N–58 H\n\n   \n\n59 CT\n\n 59 CT   \n\n57 N–59 CT\n\n   \n\n60 H1\n\n 60 H1   \n\n59 CT–60 H1\n\n   \n\n61 CT\n\n 61 CT   \n\n59 CT–61 CT\n\n   \n\n65 C\n\n 65 C   \n\n59 CT–65 C\n\n   \n\n62 HC\n\n 62 HC   \n\n61 CT–62 HC\n\n   \n\n63 HC\n\n 63 HC   \n\n61 CT–63 HC\n\n   \n\n64 HC\n\n 64 HC   \n\n61 CT–64 HC\n\n   \n\n66 O\n\n 66 O   \n\n65 C–66 O\n\n   \n\n67 N\n\n 67 N   \n\n65 C–67 N\n\n   \n\n68 H\n\n 68 H   \n\n67 N–68 H\n\n   \n\n69 CT\n\n 69 CT   \n\n67 N–69 CT\n\n   \n\n70 H1\n\n 70 H1   \n\n69 CT–70 H1\n\n   \n\n71 H1\n\n 71 H1   \n\n69 CT–71 H1\n\n   \n\n72 H1\n\n 72 H1   \n\n69 CT–72 H1\n\n  \n\n\nFigure 1: A diagram of the ala topology\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "guide/developer/index.html",
    "href": "guide/developer/index.html",
    "title": "Developer",
    "section": "",
    "text": "Resources for developers.\n\n\n\n Back to top"
  },
  {
    "objectID": "guide/index.html",
    "href": "guide/index.html",
    "title": "Guide",
    "section": "",
    "text": "Welcome to the KIMMDY documentation. Here you will find all the information you need to get started with KIMMDY.\n\n\n\n Back to top"
  }
]