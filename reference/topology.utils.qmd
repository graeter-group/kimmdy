# topology.utils { #kimmdy.topology.utils }

`topology.utils`

## Functions

| Name | Description |
| --- | --- |
| [attributes_to_list](#kimmdy.topology.utils.attributes_to_list) |  |
| [field_or_none](#kimmdy.topology.utils.field_or_none) |  |
| [get_by_permutations](#kimmdy.topology.utils.get_by_permutations) |  |
| [get_element_id](#kimmdy.topology.utils.get_element_id) |  |
| [get_protein_section](#kimmdy.topology.utils.get_protein_section) | Get content of a section in the first moleculetype (protein) from a topology dict. |
| [get_top_section](#kimmdy.topology.utils.get_top_section) | Get content of a section from a topology dict. |
| [is_not_none](#kimmdy.topology.utils.is_not_none) |  |
| [match_atomic_item_to_atomic_type](#kimmdy.topology.utils.match_atomic_item_to_atomic_type) |  |
| [match_attr](#kimmdy.topology.utils.match_attr) |  |
| [match_id_to_patch](#kimmdy.topology.utils.match_id_to_patch) |  |
| [match_multi_attr](#kimmdy.topology.utils.match_multi_attr) |  |
| [set_protein_section](#kimmdy.topology.utils.set_protein_section) | Set content of a section in the first moleculetype (protein) from a topology dict. |
| [set_top_section](#kimmdy.topology.utils.set_top_section) | Set content of a section from a topology dict. |

### attributes_to_list { #kimmdy.topology.utils.attributes_to_list }

`topology.utils.attributes_to_list(obj)`

### field_or_none { #kimmdy.topology.utils.field_or_none }

`topology.utils.field_or_none(l, i)`

### get_by_permutations { #kimmdy.topology.utils.get_by_permutations }

`topology.utils.get_by_permutations(d, key)`

### get_element_id { #kimmdy.topology.utils.get_element_id }

`topology.utils.get_element_id(e)`

### get_protein_section { #kimmdy.topology.utils.get_protein_section }

`topology.utils.get_protein_section(top, name)`

Get content of a section in the first moleculetype (protein) from a topology dict.

### get_top_section { #kimmdy.topology.utils.get_top_section }

`topology.utils.get_top_section(top, name, moleculetype=None)`

Get content of a section from a topology dict.
By resolving any `#ifdef` statements by check in the top['define'] dict
and choosing the 'content' or 'else_content' depending on the result.

### is_not_none { #kimmdy.topology.utils.is_not_none }

`topology.utils.is_not_none(x)`

### match_atomic_item_to_atomic_type { #kimmdy.topology.utils.match_atomic_item_to_atomic_type }

`topology.utils.match_atomic_item_to_atomic_type(id, types)`

### match_attr { #kimmdy.topology.utils.match_attr }

`topology.utils.match_attr(patches, attr, m)`

### match_id_to_patch { #kimmdy.topology.utils.match_id_to_patch }

`topology.utils.match_id_to_patch(id, patches)`

### match_multi_attr { #kimmdy.topology.utils.match_multi_attr }

`topology.utils.match_multi_attr(patches, attrs, m)`

### set_protein_section { #kimmdy.topology.utils.set_protein_section }

`topology.utils.set_protein_section(top, name, value)`

Set content of a section in the first moleculetype (protein) from a topology dict.

### set_top_section { #kimmdy.topology.utils.set_top_section }

`topology.utils.set_top_section(top, name, value, moleculetype=None)`

Set content of a section from a topology dict.
By resolving any `#ifdef` statements by check in the top['define'] dict
and choosing the 'content' or 'else_content' depending on the result.