# plugins { #kimmdy.plugins }

`plugins`

Plugin base classes and basic instances thereof.

Also discovers and loads KIMMDY plugins.

## Classes

| Name | Description |
| --- | --- |
| [BasicParameterizer](#kimmdy.plugins.BasicParameterizer) | reconstruct base force field state |
| [ReactionPlugin](#kimmdy.plugins.ReactionPlugin) | Reaction base class |

### BasicParameterizer { #kimmdy.plugins.BasicParameterizer }

```python
plugins.BasicParameterizer(self, **kwargs)
```

reconstruct base force field state

#### Methods

| Name | Description |
| --- | --- |
| [parameterize_topology](#kimmdy.plugins.BasicParameterizer.parameterize_topology) | Do nothing, |

##### parameterize_topology { #kimmdy.plugins.BasicParameterizer.parameterize_topology }

```python
plugins.BasicParameterizer.parameterize_topology(
    current_topology
    focus_nrs=None
)
```

Do nothing,
all necessary actions should already have happened in bind_bond and break_bond of Topology

### ReactionPlugin { #kimmdy.plugins.ReactionPlugin }

```python
plugins.ReactionPlugin(self, name, runmng)
```

Reaction base class

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type                                         | Description                                                                                                                                       | Default    |
|--------|----------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| name   | [str](`str`)                                 | Name of the reaction.                                                                                                                             | _required_ |
| runmng | [RunManager](`kimmdy.runmanager.RunManager`) | RunManager instance.                                                                                                                              | _required_ |
| config |                                              | Subconfig of the reaction (i.e. `self.runmng.config.reactions.__getattribute__(self.name)`. Use this to access and pass settings to the reaction. | _required_ |

#### Methods

| Name | Description |
| --- | --- |
| [get_recipe_collection](#kimmdy.plugins.ReactionPlugin.get_recipe_collection) | Get a RecipeCollection as a result of the reaction. |

##### get_recipe_collection { #kimmdy.plugins.ReactionPlugin.get_recipe_collection }

```python
plugins.ReactionPlugin.get_recipe_collection(files)
```

Get a RecipeCollection as a result of the reaction.

This is run as a [](`~kimmdy.tasks.Task`) in the RunManager.
How the RecipeCollection is built is up to the reaction.
It has access to the current state of the system via the
runmanager `self.runmng` and the files.

###### Parameters {.doc-section .doc-section-parameters}

| Name   | Type                                  | Description        | Default    |
|--------|---------------------------------------|--------------------|------------|
| files  | [TaskFiles](`kimmdy.tasks.TaskFiles`) | TaskFiles instance | _required_ |