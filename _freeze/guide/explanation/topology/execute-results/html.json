{
  "hash": "892ed2395dca26e78e49287e5c694e0b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Visualize Topologies\nmermaid-format: svg\n---\n\n\n\n\n## Capped Alanine with a radical\n\n::: {#8ab2cad2 .cell execution_count=1}\n``` {.python .cell-code}\nfrom kimmdy.parsing import read_top\nfrom kimmdy.topology.topology import Topology\nfrom pathlib import Path\nfrom kimmdy.tools import write_top_as_dot\n```\n:::\n\n\n::: {#c006137a .cell execution_count=2}\n``` {.python .cell-code}\npath_a = read_top(Path('../../tests/test_files/test_coordinates/topol_stateA.top'), use_gmx_dir=False)\npath_b = read_top(Path('../../tests/test_files/test_coordinates/topol_stateB.top'), use_gmx_dir=False)\ntop_a = Topology(path_a)\ntop_b = Topology(path_b)\n\nwrite_top_as_dot(top_a, \"ala-top-a.dot\")\nwrite_top_as_dot(top_b, \"ala-top-b.dot\")\n```\n:::\n\n\n:::{layout-ncol=2}\n\n\n\n```{dot}\n//| echo: false\n//| label: fig-ala\n//| fig-cap: \"A diagram of the Ala topology\"\n//| fig-width: 100%\n//| file: ala-top-a.dot\n```\n\n```{dot}\n//| echo: false\n//| label: fig-ala\n//| fig-cap: \"A diagram of the Ala topology after HAT\"\n//| fig-width: 100%\n//| file: ala-top-b.dot\n```\n\n\n\n:::\n\nFor example, these are the resulting changes in dihedrals:\n\n::: {#37fb7f24 .cell execution_count=3}\n``` {.python .cell-code}\nfor dihedral in top_a.proper_dihedrals:\n  if dihedral not in top_b.proper_dihedrals:\n    print(dihedral)\n\nprint(\"----\")\nfor dihedral in top_b.proper_dihedrals:\n  if dihedral not in top_a.proper_dihedrals:\n    print(dihedral)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('19', '24', '26', '27')\n('25', '24', '26', '27')\n('27', '26', '28', '29')\n('27', '26', '28', '30')\n('27', '26', '28', '34')\n----\n('15', '17', '19', '27')\n('18', '17', '19', '27')\n('27', '19', '20', '21')\n('27', '19', '20', '22')\n('27', '19', '20', '23')\n('27', '19', '24', '25')\n('27', '19', '24', '26')\n```\n:::\n:::\n\n\n## Multiple molecules\n\n::: {#d7e34431 .cell execution_count=4}\n``` {.python .cell-code}\nurea_dict = read_top(Path('../../tests/test_files/test_topology/urea.top'), use_gmx_dir=False)\nurea = Topology(urea_dict)\nwrite_top_as_dot(urea, \"urea-top.dot\")\n```\n:::\n\n\n```{dot}\n//| echo: false\n//| label: fig-ala\n//| fig-cap: \"Topology of one molecule of urea\"\n//| file: urea-top.dot\n```\n\n\n\n\nWhen we want to run reactions within molecules that are either\nseparate moleculetypes or multiples of the same moleculetype,\nKIMMDY can combine those into a single moleculetype and\nmake multiples explicit.\n\ni.e. if we have a topology with two molecules of urea\ndefined as:\n\n```ini\n[ system ]\nUrea in Water\n\n[ molecules ]\n;molecule name   nr.\nUrea             2\nSOL              1000\n```\n\n::: {#5b2ad9cc .cell execution_count=5}\n``` {.python .cell-code}\nurea_dict = read_top(Path('../../tests/test_files/test_topology/urea-times-2.top'), use_gmx_dir=False)\nurea = Topology(urea_dict)\nwrite_top_as_dot(urea, \"urea-2-top.dot\")\n```\n:::\n\n\nWe end up with\n\n\n\n\n```{dot}\n//| echo: false\n//| label: fig-ala\n//| fig-cap: \"A diagram of the two urea molecules topology\"\n//| file: urea-2-top.dot\n```\n\n\n\n\nThis way, explicit atom numbers match up with the atom numbers\nin the coordinate file (or rather, line numbers - 2, since the\nnumbers in the actual `atomnr` column can overflow due to the fixed-width file format).\n\n",
    "supporting": [
      "topology_files"
    ],
    "filters": [],
    "includes": {}
  }
}