# tasks { #kimmdy.tasks }

`tasks`

## Classes

| Name | Description |
| --- | --- |
| [Task](#kimmdy.tasks.Task) | A task to be performed as as a step in the RunManager. |
| [TaskFiles](#kimmdy.tasks.TaskFiles) | Input and Output files and directories. |

### Task { #kimmdy.tasks.Task }

`tasks.Task(self, runmng, f, kwargs=None, out=None)`

#### Parameters:

runmng : kimmdy.runmanager.Runmanager
    Runmanager instance
f : Callable
    Will be called when the task is called
kwargs : dict
    kwargs will be passed to f
out : str, optional
    If not None, an output dir will be created with this name

### TaskFiles { #kimmdy.tasks.TaskFiles }

`tasks.TaskFiles(get_latest, input=field(default_factory=dict), output=field(default_factory=dict), outputdir=Path(), logger=logging.getLogger('kimmdy.basetask'))`

Input and Output files and directories.

Hosts the input and output files belonging to a task.
A function or method that wants to be callable as a Task
has to return a TaskFiles object.
The input defaultdict is populated on the fly using
get_latest of the runmanager to find newest files.
Files which can not be found by get_latest must be added manually.

#### Examples

```python
>>> class run():
>>>     def get_latest(self, s):
>>>         return f"latest {s}"
>>> runmng = run()
>>> files = TaskFiles(runmng)
>>> files.input
>>> files.input["top"]
{'top': 'latest top'}
```

## Functions

| Name | Description |
| --- | --- |
| [create_task_directory](#kimmdy.tasks.create_task_directory) | Creates TaskFiles object, output directory and symlinks ff. |

### create_task_directory { #kimmdy.tasks.create_task_directory }

`tasks.create_task_directory(runmng, postfix)`

Creates TaskFiles object, output directory and symlinks ff.