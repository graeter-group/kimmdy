# parsing { #kimmdy.parsing }

`parsing`

All read_&lt;...&gt; and write_&lt;...&gt; functions.

## Attributes

| Name | Description |
| --- | --- |
| [GMX_BUILTIN_FF_DIR](#kimmdy.parsing.GMX_BUILTIN_FF_DIR) | Path to gromacs data directory with the built-in forcefields. |
| [TopologyDict](#kimmdy.parsing.TopologyDict) | A raw representation of a topology file. |

## Functions

| Name | Description |
| --- | --- |
| [read_distances_dat](#kimmdy.parsing.read_distances_dat) | Read a distances.dat plumed output file. |
| [read_edissoc](#kimmdy.parsing.read_edissoc) | reads a edissoc file and turns it into a dict. |
| [read_plumed](#kimmdy.parsing.read_plumed) | Read a plumed.dat configuration file. |
| [read_top](#kimmdy.parsing.read_top) | Read a topology file into a raw TopologyDict represenation. |
| [resolve_includes](#kimmdy.parsing.resolve_includes) | Resolve #include statements in a (top/itp) file. |
| [write_plumed](#kimmdy.parsing.write_plumed) | Write a plumed.dat configuration file. |
| [write_top](#kimmdy.parsing.write_top) | Write a TopologyDict to a topology file. |

### read_distances_dat { #kimmdy.parsing.read_distances_dat }

`parsing.read_distances_dat(distances_dat)`

Read a distances.dat plumed output file.

### read_edissoc { #kimmdy.parsing.read_edissoc }

`parsing.read_edissoc(path)`

reads a edissoc file and turns it into a dict.
the tuple of bond atoms make up the key,
the dissociation energy E_dissoc [kJ mol-1] is the value

#### Parameters

| Name   | Type                   | Description                                | Default    |
|--------|------------------------|--------------------------------------------|------------|
| `path` | [Path](`pathlib.Path`) | Path to the file. E.g. Path("edissoc.dat") | _required_ |

### read_plumed { #kimmdy.parsing.read_plumed }

`parsing.read_plumed(path)`

Read a plumed.dat configuration file.

#### Parameters

| Name   | Type                   | Description                         | Default    |
|--------|------------------------|-------------------------------------|------------|
| `path` | [Path](`pathlib.Path`) | Path to the file. E.g. "plumed.dat" | _required_ |

#### Returns

| Type                                        | Description                                                                                 |
|---------------------------------------------|---------------------------------------------------------------------------------------------|
| [Plumed_dict](`kimmdy.parsing.Plumed_dict`) | dict with keys: 'distances' and 'prints' Each is a list of dicts containing plumed keywords |

### read_top { #kimmdy.parsing.read_top }

`parsing.read_top(path, ffdir=None)`

Read a topology file into a raw TopologyDict represenation.

#### Parameters

| Name   | Type                   | Description                | Default    |
|--------|------------------------|----------------------------|------------|
| `path` | [Path](`pathlib.Path`) | Path to the topology file. | _required_ |

#### Assumptions And Limitation

- `#include` statements will be resolved
- comments will be removed
- all lines are stripped of leading and trailing whitespace
- `#undef` is not supported
- a section within `ifdef` may be a subsection of a section that was started
  outside of the `ifdef`
- `#if..#endif` statements only surround a full section or subsection,
  not individual lines within a section and
  a section may either be contained within if ... else or it may not be,
  but it can not be duplicated with one part inside and one outside.
- `if .. else` can&#x27;t be nested
- ``#include`` s that don&#x27;t resolve to a valid file path are silently dropped
- sections that can have subsections can also exist multiple, separate times
  e.g. moleculetype will appear multiple times and they should not be merged

### resolve_includes { #kimmdy.parsing.resolve_includes }

`parsing.resolve_includes(path)`

#### Arguments

path :
    Filepath to read.

#### Returns

| Type                                                    | Description                                                          |
|---------------------------------------------------------|----------------------------------------------------------------------|
| [list](`list`)\[[str](`str`)\]                          | List of lines.                                                       |
| [Optional](`typing.Optional`)\[[Path](`pathlib.Path`)\] | Path to the ff directory if one of the includes used a file from it. |

### write_plumed { #kimmdy.parsing.write_plumed }

`parsing.write_plumed(d, path)`

Write a plumed.dat configuration file.

#### Parameters

| Name   | Type                                        | Description                                    | Default    |
|--------|---------------------------------------------|------------------------------------------------|------------|
| `d`    | [Plumed_dict](`kimmdy.parsing.Plumed_dict`) | Dictionary containing 'distances' and 'prints' | _required_ |
| `path` | [Path](`pathlib.Path`)                      | Path to the file. E.g. "plumed.dat"            | _required_ |

### write_top { #kimmdy.parsing.write_top }

`parsing.write_top(top, outfile)`

Write a TopologyDict to a topology file.

#### Parameters

| Name      | Type                                          | Description                                   | Default    |
|-----------|-----------------------------------------------|-----------------------------------------------|------------|
| `top`     | [TopologyDict](`kimmdy.parsing.TopologyDict`) | Raw dictionary represenation of the topology. | _required_ |
| `outfile` | [Path](`pathlib.Path`)                        | Path to the topology file to write to.        | _required_ |