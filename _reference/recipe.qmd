# recipe { #kimmdy.recipe }

`recipe`

Contains the Reaction Recipe, RecipeStep and RecipeCollection.

## Classes

| Name | Description |
| --- | --- |
| [Bind](#kimmdy.recipe.Bind) | Change topology to form a bond |
| [BondOperation](#kimmdy.recipe.BondOperation) | Handle a bond operation on the recipe step. |
| [Break](#kimmdy.recipe.Break) | Change topology to break a bond |
| [CustomTopMod](#kimmdy.recipe.CustomTopMod) | A custom recipe step that can be used to define a custom topology modification. |
| [DeferredRecipeSteps](#kimmdy.recipe.DeferredRecipeSteps) | DeferredRecipeSteps |
| [Place](#kimmdy.recipe.Place) | Change topology and/or coordinates to place an atom. |
| [Recipe](#kimmdy.recipe.Recipe) | A reaction path defined by one series of RecipeSteps. |
| [RecipeCollection](#kimmdy.recipe.RecipeCollection) | A RecipeCollection encompasses a list of reaction paths. |
| [RecipeStep](#kimmdy.recipe.RecipeStep) | Base class for all RecipeSteps. |
| [Relax](#kimmdy.recipe.Relax) | Start a relaxation MD. |

### Bind { #kimmdy.recipe.Bind }

```python
recipe.Bind(
    self,
    atom_ix_1=None,
    atom_ix_2=None,
    atom_id_1=None,
    atom_id_2=None,
)
```

Change topology to form a bond

#### Parameters {.doc-section .doc-section-parameters}

| Name      | Type         | Description                                               | Default   |
|-----------|--------------|-----------------------------------------------------------|-----------|
| atom_ix_1 | [int](`int`) | The index of the first atom. zero-based, by default None  | `None`    |
| atom_ix_2 | [int](`int`) | The index of the second atom. zero-based, by default None | `None`    |
| atom_id_1 | [str](`str`) | The ID of the first atom. one-based, by default None      | `None`    |
| atom_id_2 | [str](`str`) | The ID of the second atom. one-based, by default None     | `None`    |

### BondOperation { #kimmdy.recipe.BondOperation }

```python
recipe.BondOperation(
    self,
    atom_ix_1=None,
    atom_ix_2=None,
    atom_id_1=None,
    atom_id_2=None,
)
```

Handle a bond operation on the recipe step.

This class takes in either zero-based indices or one-base IDs for two atoms.

#### Parameters {.doc-section .doc-section-parameters}

| Name      | Type         | Description                                               | Default   |
|-----------|--------------|-----------------------------------------------------------|-----------|
| atom_ix_1 | [int](`int`) | The index of the first atom. zero-based, by default None  | `None`    |
| atom_ix_2 | [int](`int`) | The index of the second atom. zero-based, by default None | `None`    |
| atom_id_1 | [str](`str`) | The ID of the first atom. one-based, by default None      | `None`    |
| atom_id_2 | [str](`str`) | The ID of the second atom. one-based, by default None     | `None`    |

#### Raises {.doc-section .doc-section-raises}

| Name   | Type                       | Description                                                     |
|--------|----------------------------|-----------------------------------------------------------------|
|        | [ValueError](`ValueError`) | If neither an index nor an ID is provided for any of the atoms. |

#### Notes {.doc-section .doc-section-notes}

Internally, this class stores the atom indices and converts IDs to indices as needed.

### Break { #kimmdy.recipe.Break }

```python
recipe.Break(
    self,
    atom_ix_1=None,
    atom_ix_2=None,
    atom_id_1=None,
    atom_id_2=None,
)
```

Change topology to break a bond

#### Parameters {.doc-section .doc-section-parameters}

| Name      | Type         | Description                                               | Default   |
|-----------|--------------|-----------------------------------------------------------|-----------|
| atom_ix_1 | [int](`int`) | The index of the first atom. zero-based, by default None  | `None`    |
| atom_ix_2 | [int](`int`) | The index of the second atom. zero-based, by default None | `None`    |
| atom_id_1 | [str](`str`) | The ID of the first atom. one-based, by default None      | `None`    |
| atom_id_2 | [str](`str`) | The ID of the second atom. one-based, by default None     | `None`    |

### CustomTopMod { #kimmdy.recipe.CustomTopMod }

```python
recipe.CustomTopMod(self, f)
```

A custom recipe step that can be used to define a custom topology modification.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type                                                                                                                                  | Description                                                       | Default    |
|--------|---------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|------------|
| f      | [Callable](`typing.Callable`)\[\[[Topology](`kimmdy.topology.topology.Topology`)\], [Topology](`kimmdy.topology.topology.Topology`)\] | A function that takes a Topology object and modifies it in place. | _required_ |

### DeferredRecipeSteps { #kimmdy.recipe.DeferredRecipeSteps }

```python
recipe.DeferredRecipeSteps(self, key, callback)
```

DeferredRecipeSteps

Are called by the kimmdy runmanager if the recipe is chosen.
The callback is given the chosen key (generic over type T) as well
as the index into the rates (and time ranges for said rates) and
the time in ps at which the reaction occurs.

### Place { #kimmdy.recipe.Place }

```python
recipe.Place(self, new_coords, ix_to_place=None, id_to_place=None)
```

Change topology and/or coordinates to place an atom.

Either provide the index (ix_to_place) or the ID (id_to_place) of the atom to place.

#### Parameters {.doc-section .doc-section-parameters}

| Name        | Type                                                                     | Description                                                                               | Default    |
|-------------|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|------------|
| new_coords  | [tuple](`tuple`)\[[float](`float`), [float](`float`), [float](`float`)\] | New xyz coordinates for atom to place to. Valid for the end point of the recipe timespan. | _required_ |
| ix_to_place | [int](`int`)                                                             | Index of atom to place. 0-based.                                                          | `None`     |
| id_to_place | [str](`str`)                                                             | Index of atom to place. 1-based                                                           | `None`     |

### Recipe { #kimmdy.recipe.Recipe }

```python
recipe.Recipe(self, recipe_steps, rates, timespans)
```

A reaction path defined by one series of RecipeSteps.
Defines everything necessart to build the
product state from the educt state.

#### Parameters {.doc-section .doc-section-parameters}

| Name         | Type                                                                                                                     | Description                                                                                                                                                                                                                                                                                          | Default    |
|--------------|--------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| recipe_steps | [list](`list`)\[[RecipeStep](`kimmdy.recipe.RecipeStep`)\] \| [DeferredRecipeSteps](`kimmdy.recipe.DeferredRecipeSteps`) | Can be a single sequence of RecipeSteps to modify the topology or a tuple with a key and a function that takes said key to generate the RecipeSteps once it has been choosen. It is up to the ReactionPlugins to choose how to match the key to the their internal state and return the RecipeSteps. | _required_ |
| rates        | [list](`list`)\[[float](`float`)\]                                                                                       | Reaction rates corresponding 1:1 to timespans.                                                                                                                                                                                                                                                       | _required_ |
| timespans    | [list](`list`)\[[list](`list`)\[[float](`float`), [float](`float`)\]\]                                                   | List of half-open timespans (t1, t2] in ps, at which this rate is valid. Recipe steps which change the coordinates only need to be applicable at the first time in the interval. Must have same number of timespans as rates. t1 can equal t2 for the last frame.                                    | _required_ |

#### Methods

| Name | Description |
| --- | --- |
| [check_consistency](#kimmdy.recipe.Recipe.check_consistency) | Run consistency checks for correct size of variables |
| [combine_with](#kimmdy.recipe.Recipe.combine_with) | Combines this Recipe with another with the same RecipeSteps. |
| [get_vmd_selection](#kimmdy.recipe.Recipe.get_vmd_selection) | Get a VMD selection string |

##### check_consistency { #kimmdy.recipe.Recipe.check_consistency }

```python
recipe.Recipe.check_consistency()
```

Run consistency checks for correct size of variables

##### combine_with { #kimmdy.recipe.Recipe.combine_with }

```python
recipe.Recipe.combine_with(other)
```

Combines this Recipe with another with the same RecipeSteps.

###### Parameters {.doc-section .doc-section-parameters}

| Name   | Type                             | Description   | Default    |
|--------|----------------------------------|---------------|------------|
| other  | [Recipe](`kimmdy.recipe.Recipe`) |               | _required_ |

##### get_vmd_selection { #kimmdy.recipe.Recipe.get_vmd_selection }

```python
recipe.Recipe.get_vmd_selection()
```

Get a VMD selection string

for the atoms involved in the recipe steps.

### RecipeCollection { #kimmdy.recipe.RecipeCollection }

```python
recipe.RecipeCollection(self, recipes)
```

A RecipeCollection encompasses a list of reaction paths.
They can originate from multiple reaction plugins, but do not need to.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description             | Default    |
|---------|----------------------------------------------------|-------------------------|------------|
| recipes | [list](`list`)\[[Recipe](`kimmdy.recipe.Recipe`)\] | List of Recipe objects. | _required_ |

#### Methods

| Name | Description |
| --- | --- |
| [aggregate_reactions](#kimmdy.recipe.RecipeCollection.aggregate_reactions) | Combines reactions having the same sequence of RecipeSteps. |
| [calc_cumprob](#kimmdy.recipe.RecipeCollection.calc_cumprob) | Calculate cumulative probability of all contained recipe steps. |
| [calc_ratesum](#kimmdy.recipe.RecipeCollection.calc_ratesum) | Calculate the sum of rates over all timesteps |
| [from_csv](#kimmdy.recipe.RecipeCollection.from_csv) | Create a RecipeCollection object from a CSV file |
| [plot](#kimmdy.recipe.RecipeCollection.plot) | Plot reaction rates over time |
| [to_csv](#kimmdy.recipe.RecipeCollection.to_csv) | Write a ReactionResult as defined in the reaction module to a csv file |

##### aggregate_reactions { #kimmdy.recipe.RecipeCollection.aggregate_reactions }

```python
recipe.RecipeCollection.aggregate_reactions()
```

Combines reactions having the same sequence of RecipeSteps.

###### Returns {.doc-section .doc-section-returns}

| Name   | Type                                       | Description                                                                    |
|--------|--------------------------------------------|--------------------------------------------------------------------------------|
|        | [unique_recipes_ixs](`unique_recipes_ixs`) | List of lists binning the old recipe indices and maps to the new recipes list. |

##### calc_cumprob { #kimmdy.recipe.RecipeCollection.calc_cumprob }

```python
recipe.RecipeCollection.calc_cumprob()
```

Calculate cumulative probability of all contained recipe steps.
Sums up to 1 over all recipes. Assumes constant rate for given timespan
and rate zero otherwise.

##### calc_ratesum { #kimmdy.recipe.RecipeCollection.calc_ratesum }

```python
recipe.RecipeCollection.calc_ratesum()
```

Calculate the sum of rates over all timesteps

###### Returns {.doc-section .doc-section-returns}

| Name   | Type                               | Description                                                                                            |
|--------|------------------------------------|--------------------------------------------------------------------------------------------------------|
|        | [boarders](`boarders`)             | flat list containing times of rate changes marking the boarders of the windows                         |
|        | [rate_windows](`rate_windows`)     | flat list containing all rates in between the boarders. Each window is orderd as in recipe_windows     |
|        | [recipe_windows](`recipe_windows`) | flat list containing the recipes of the corresponding window. Each window is orderd as in rate_windows |

##### from_csv { #kimmdy.recipe.RecipeCollection.from_csv }

```python
recipe.RecipeCollection.from_csv(path)
```

Create a RecipeCollection object from a CSV file
Returns the recipe collection and a single recipe that was picked, otherwise None

##### plot { #kimmdy.recipe.RecipeCollection.plot }

```python
recipe.RecipeCollection.plot(outfile, highlight_r=None, highlight_t=None)
```

Plot reaction rates over time

###### Parameters {.doc-section .doc-section-parameters}

| Name        | Type                             | Description                                          | Default    |
|-------------|----------------------------------|------------------------------------------------------|------------|
| outfile     | [Path](`pathlib.Path`)           | Where to save the plot, must have compatible suffix. | _required_ |
| highlight_r | [Recipe](`kimmdy.recipe.Recipe`) | Recipe to highlight, by default None                 | `None`     |
| highlight_t | [float](`float`)                 | Time at which the reactions starts                   | `None`     |

##### to_csv { #kimmdy.recipe.RecipeCollection.to_csv }

```python
recipe.RecipeCollection.to_csv(path, picked_recipe=None)
```

Write a ReactionResult as defined in the reaction module to a csv file

### RecipeStep { #kimmdy.recipe.RecipeStep }

```python
recipe.RecipeStep()
```

Base class for all RecipeSteps.
Indices can be accessed as 0-based or 1-based.
ix: 0-based, int
id: 1-based, str

#### Methods

| Name | Description |
| --- | --- |
| [from_str](#kimmdy.recipe.RecipeStep.from_str) | Parses expressions of the following forms into RecipeStep objects: |

##### from_str { #kimmdy.recipe.RecipeStep.from_str }

```python
recipe.RecipeStep.from_str(s)
```

Parses expressions of the following forms into RecipeStep objects:

- Place: Place(ix_to_place=0, new_coords=(0.0, 0.0, 0.0))
- Break: Break(atom_ix_1=0, atom_ix_2=1)
- Bind: Bind(atom_ix_1=0, atom_ix_2=1)
- Relax: Relax()
- CustomTopMod: CustomTopMod(f=<function f at 0x7f7f7f7f7f7f>)

###### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                                   | Default    |
|--------|--------------|-----------------------------------------------|------------|
| s      | [str](`str`) | String representation of a RecipeStep object. | _required_ |

### Relax { #kimmdy.recipe.Relax }

```python
recipe.Relax(self)
```

Start a relaxation MD.

The molecular system coordinates are far out of equilibrium after most topology changes.
A relaxtion MD simulation using for example the slow growth method helps to reach the new equilibrium.