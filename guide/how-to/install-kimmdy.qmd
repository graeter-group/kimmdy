---
title: "Install KIMMDY with Plugins"
author: "Kai Riedmiller"
---

## Complete Installation with ML Plugins

### Prerequisites

- `uv`: recommended package manager to install kimmdy. [Get it here](https://docs.astral.sh/uv/getting-started/installation/)
- `gromacs>=2023.2` 
  - Version 2021.4 works with everything except slow-growth.

Optional:

- `plumed`-patched version of `gromacs` (for the homolysis reaction).
  Gromacs 2025 and above does not need to be patched with plumed, 
only the `PLUMED_KERNEL` variabel needs to be set to your `lib/libplumedKernel.so`.
    ([See plumded documentation](https://www.plumed.org/doc-v2.9/user-doc/html/_installation.html))

### Installation

::: {.panel-tabset}

## User installation

```bash
uv tool install -p 3.11 kimmdy[all]
```

`kimmdy`, its subcommands, and its plugins are now availabe, test it with:

```bash
kimmdy --help
```

Uninstall by using:

```bash
uv tool uninstall kimmdy
```


## Developer installation

```bash
git clone git@github.com:graeter-group/kimmdy.git --recurse-submodules
cd kimmdy
uv sync --extra plugins
```

To run kimmdy, either activate the venv:

```bash
source .venv/bin/activate
kimmdy --help
```

.. or use `uv run`:

```bash
uv run kimmdy --help
```
:::

Instead of installing all plugins, you can also pick the plugins you want, 
the available extras are:

- `reactions`: makes `homolysis`, `hat-naive`  and `dummyreaction` reactions available.
- `grappa`: allows parametrization of any system on-the-fly.
- `hat`: hydrogen atom transfer reaction plugin
- `hydrolysis`: hydrolysis reaction plugin
- `dimerization`: dimerization reaction plugin

## Notes on the project strucure

Plugins are developed in separate git repositories.
Check the [`kimmdy` github topic](https://github.com/topics/kimmdy) to find them all.

Officially supported plugins are linked as subrepositories of kimmdy inside 
the `plugins` directory.
These are by default *not* pulled *via* `git clone`, to clone them add `--recurse-submodules`.

To update them, get new ones, or pull them after initially omitting them, use:  
```bash
git submodule update --init --recursive
```




