# kmc { #kimmdy.kmc }

`kmc`

Kinetic Monte Carlo (KMC) classes and functions.

In our system, the reaction rate r = (deterministic) reaction constant k
= stochastic reaction constant c (from gillespie 1977)
= propensity a (from Anderson 2007)
because of the fundamental premise of chemical kinetics
and because we have one reactant molecule

## Classes

| Name | Description |
| --- | --- |
| [KMCResult](#kimmdy.kmc.KMCResult) | The result of a KMC step. Similar to a Recipe but for the concrete realization of a reaction. |

### KMCResult { #kimmdy.kmc.KMCResult }

`kmc.KMCResult(recipe=field(default_factory=lambda : Recipe([], [], [])), reaction_probability=None, time_delta=None, time_start=None)`

The result of a KMC step. Similar to a Recipe but for the concrete realization of a reaction.

#### Attributes

| Name                 | Type                                                                | Description                                                                                                                      |
|----------------------|---------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|
| recipe               | [Recipe](`kimmdy.recipe.Recipe`)                                    | Single sequence of RecipeSteps to build product                                                                                  |
| reaction_probability | [Optional](`typing.Optional`)\[[list](`list`)\[[float](`float`)\]\] | Integral of reaction propensity with respect to time                                                                             |
| time_delta           | [Optional](`typing.Optional`)\[[float](`float`)\]                   | MC time jump during which the reaction occurs [ps]                                                                               |
| time_start           | [Optional](`typing.Optional`)\[[float](`float`)\]                   | Time, from which the reaction starts. The reaction changes the geometry/topology of this timestep and continues from there. [ps] |

## Functions

| Name | Description |
| --- | --- |
| [extrande](#kimmdy.kmc.extrande) | Extrande KMC |
| [frm](#kimmdy.kmc.frm) | First Reaction Method variant of Kinetic Monte Carlo. |
| [rf_kmc](#kimmdy.kmc.rf_kmc) | Rejection-Free Monte Carlo. |

### extrande { #kimmdy.kmc.extrande }

`kmc.extrande(recipe_collection, logger=logging.getLogger(__name__), rng=default_rng(), tau_scale=1.0)`

Extrande KMC

Implemented as in
`Stochastic Simulation of Biomolecular Networks in Dynamic Environments`
[10.1371/journal.pcbi.1004923](https://doi.org/10.1371/journal.pcbi.1004923)

#### Parameters

| Name                | Type                                                                         | Description                                         | Default         |
|---------------------|------------------------------------------------------------------------------|-----------------------------------------------------|-----------------|
| `recipe_collection` | [RecipeCollection](`kimmdy.recipe.RecipeCollection`)                         | from which one will be choosen                      | _required_      |
| `rng`               | [np](`numpy`).[random](`numpy.random`).[Generator](`numpy.random.Generator`) | function to generate random numbers in the KMC step | `default_rng()` |
| `tau_scale`         | [float](`float`)                                                             | Scaling factor for tau, by default 1.0              | `1.0`           |

#### Returns

| Type                                | Description         |
|-------------------------------------|---------------------|
| [KMCResult](`kimmdy.kmc.KMCResult`) | time delta set to 0 |

### frm { #kimmdy.kmc.frm }

`kmc.frm(recipe_collection, logger=logging.getLogger(__name__), rng=default_rng(), MD_time=None)`

First Reaction Method variant of Kinetic Monte Carlo.
takes RecipeCollection and choses a recipe based on which reaction would occur.

Compare e.g. [Wikipedia KMC - time dependent](https://en.wikipedia.org/wiki/Kinetic_Monte_Carlo#Time-dependent_Algorithms)

#### Parameters

| Name                | Type                                                                         | Description                                                                        | Default         |
|---------------------|------------------------------------------------------------------------------|------------------------------------------------------------------------------------|-----------------|
| `recipe_collection` | [RecipeCollection](`kimmdy.recipe.RecipeCollection`)                         | from which one will be choosen                                                     | _required_      |
| `rng`               | [np](`numpy`).[random](`numpy.random`).[Generator](`numpy.random.Generator`) | to generate random numbers in the KMC step                                         | `default_rng()` |
| `MD_time`           | [Optional](`typing.Optional`)\[[float](`float`)\]                            | time [ps] to compare conformational events with reaction events in the time domain | `None`          |

### rf_kmc { #kimmdy.kmc.rf_kmc }

`kmc.rf_kmc(recipe_collection, logger=logging.getLogger(__name__), rng=default_rng())`

Rejection-Free Monte Carlo.
Takes RecipeCollection and choses a recipe based on the relative propensity of the events.
The 'start' time of the reaction is the time of the highest rate of the accepted reaction.

Compare e.g. [Wikipedia KMC - rejection free](https://en.wikipedia.org/wiki/Kinetic_Monte_Carlo#Rejection-free_KMC)

#### Parameters

| Name                | Type                                                                         | Description                                         | Default         |
|---------------------|------------------------------------------------------------------------------|-----------------------------------------------------|-----------------|
| `recipe_collection` | [RecipeCollection](`kimmdy.recipe.RecipeCollection`)                         | from which one will be choosen                      | _required_      |
| `rng`               | [np](`numpy`).[random](`numpy.random`).[Generator](`numpy.random.Generator`) | function to generate random numbers in the KMC step | `default_rng()` |